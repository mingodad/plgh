//
// From tree-sitter-sml/src/grammar.json
//
//
// EBNF to generate railroad diagram at 
//      (IPV6) https://www.bottlecaps.de/rr/ui
//      (IPV4) https://rr.red-dove.com/ui
//

source_file ::=
	 ( _exp | _sdec* ) ( ';' ( _exp | _sdec* ) )*

_sdec ::=
	 structure_dec
	| signature_dec
	| funsig_dec
	| functor_dec
	| local_dec
	| _ldec

structure_dec ::=
	 'structure' strb ( 'and' strb )*

strb ::=
	 ident _sigconstraint_op? '=' _str

_sigconstraint_op ::=
	 transparent_sigconstraint_op
	| opaque_sigconstraint_op

transparent_sigconstraint_op ::=
	 ':' _sign

opaque_sigconstraint_op ::=
	 ':>' _sign

_str ::=
	 var_struct
	| base_struct
	| app_struct
	| let_struct
	| constraint_struct

var_struct ::=
	 qident

base_struct ::=
	 'struct' ( ';' | _strdec )* 'end'

_strdec ::=
	 structure_dec_strdec
	| functor_dec_strdec
	| local_dec_strdec
	| _ldec

structure_dec_strdec ::=
	 'structure' strb ( 'and' strb )*

functor_dec_strdec ::=
	 'functor' fctb ( 'and' fctb )*

local_dec_strdec ::=
	 'local' ( ';' | _strdec )* 'in' ( ';' | _strdec )* 'end'

app_struct ::=
	 qident arg_fct+

let_struct ::=
	 'let' ( ';' | _strdec )* 'in' _str 'end'

constraint_struct ::=
	 _str ( ':' | ':>' ) _sign

signature_dec ::=
	 'signature' sigb ( 'and' sigb )*

sigb ::=
	 ident '=' _sign

_sign ::=
	 var_sign
	| base_sign
	| aug_sign

var_sign ::=
	 ident

base_sign ::=
	 'sig' ( ';' | _spec )* 'end'

aug_sign ::=
	 _sign 'where' _whspec ( 'and' _whspec )*

_spec ::=
	 str_spec
	| functor_spec
	| datatype_repl_spec
	| datatype_spec
	| type_spec
	| eqtype_spec
	| val_spec
	| exception_spec
	| sharing_spec
	| include_spec

str_spec ::=
	 'structure' strspec ( 'and' strspec )*

strspec ::=
	 ident ':' _sign ( '=' qident )?

functor_spec ::=
	 'functor' fctspec ( 'and' fctspec )*

fctspec ::=
	 ident _fsig

datatype_repl_spec ::=
	 'datatype' dtrepl

dtrepl ::=
	 _full_ident '=' 'datatype' con_ty

datatype_spec ::=
	 'datatype' db ( 'and' db )* ( 'withtype' tb ( 'and' tb )* )?

type_spec ::=
	 'type' tyspec ( 'and' tyspec )*

tyspec ::=
	 tyvar_seq? _full_ident ( '=' _ty )?

eqtype_spec ::=
	 'eqtype' tyspec ( 'and' tyspec )*

val_spec ::=
	 'val' valspec ( 'and' valspec )*

valspec ::=
	 'op'? _full_ident ':' _ty

exception_spec ::=
	 'exception' exnspec ( 'and' exnspec )*

exnspec ::=
	 _full_ident ( 'of' _ty )?

sharing_spec ::=
	 'sharing' sharespec ( 'and' sharespec )*

sharespec ::=
	 'type'? qident ( '=' qident )+

include_spec ::=
	 'include' ( _sign | ident ident+ )

_whspec ::=
	 type_whspec
	| struct_whsepc

type_whspec ::=
	 'type' tyvar_seq? qident '=' _ty

struct_whsepc ::=
	 qident '=' qident

funsig_dec ::=
	 'funsig' fsigb ( 'and' fsigb )*

fsigb ::=
	 ident fparam+ '=' _sign

_fsig ::=
	 var_fsig
	| base_fsig

var_fsig ::=
	 ':' ident

base_fsig ::=
	 fparam+ ':' _sign

functor_dec ::=
	 'functor' fctb ( 'and' fctb )*

fctb ::=
	 ident fparam+ _sigconstraint_op? '=' _str
	| ident _fsigconstraint_op? '=' _fct_exp

fparam ::=
	 '(' ident ':' _sign ')'
	| '(' ( ';' | _spec )* ')'

_fsigconstraint_op ::=
	 transparent_fsigconstraint_op
	| opaque_fsigconstraint_op

transparent_fsigconstraint_op ::=
	 ':' ident

opaque_fsigconstraint_op ::=
	 ':>' ident

_fct_exp ::=
	 var_fct_exp
	| app_fct_exp
	| let_fct_exp

var_fct_exp ::=
	 qident

app_fct_exp ::=
	 qident arg_fct+

arg_fct ::=
	 '(' ( ';' | _strdec )* ')'
	| '(' _str ')'

let_fct_exp ::=
	 'let' ( ';' | _strdec )* 'in' _fct_exp 'end'

local_dec ::=
	 'local' ( ';' | _sdec )* 'in' ( ';' | _sdec )* 'end'

_ldec ::=
	 val_ldec
	| fun_ldec
	| type_ldec
	| datatype_repl_ldec
	| datatype_ldec
	| abstype_ldec
	| exception_ldec
	| open_ldec
	| fixity_ldec
	| overload_ldec

val_ldec ::=
	 'val' tyvar_seq? 'rec'? vb ( 'and' vb )*

vb ::=
	 _pat '=' _exp

fun_ldec ::=
	 'fun' tyvar_seq? fb ( 'and' fb )*

fb ::=
	 clause ( '|' clause )*

clause ::=
	 _apat+ constraint? '=' _exp

constraint ::=
	 ':' _ty

type_ldec ::=
	 'type' tb ( 'and' tb )*

tb ::=
	 tyvar_seq? _full_ident '=' _ty

datatype_repl_ldec ::=
	 'datatype' dtrepl

datatype_ldec ::=
	 'datatype' db ( 'and' db )* ( 'withtype' tb ( 'and' tb )* )?

db ::=
	 tyvar_seq? _full_ident '=' constr ( '|' constr )*

constr ::=
	 'op'? _full_ident ( 'of' _ty )?

abstype_ldec ::=
	 'abstype' db ( 'and' db )* ( 'withtype' tb ( 'and' tb )* )? 'with' ( ';' | _ldec | local_dec_let )* 'end'

exception_ldec ::=
	 'exception' eb ( 'and' eb )*

eb ::=
	 'op'? _full_ident ( exn_gen | exn_def )?

exn_gen ::=
	 'of' _ty

exn_def ::=
	 '=' qident

open_ldec ::=
	 'open' qident+

fixity_ldec ::=
	 ( ( 'infix' | 'infixr' ) int_constant? | 'nonfix' ) _full_ident+

overload_ldec ::=
	 'overload' _full_ident ':' _ty 'as' _exp ( 'and' _exp )*

_pat ::=
	 as_pat
	| constraint_pat
	| app_pat

as_pat ::=
	 _pat 'as' _pat

constraint_pat ::=
	 _pat ':' _ty

app_pat ::=
	 _apat+

_apat ::=
	 _apat_
	| paren_pat
	| var_pat
	| tuple_unit_pat
	| tuple_pat
	| or_pat

paren_pat ::=
	 '(' _pat ')'

var_pat ::=
	 _full_ident

tuple_unit_pat ::=
	 '(' ')'

tuple_pat ::=
	 '(' _pat ( ',' _pat )+ ')'

or_pat ::=
	 '(' _pat ( '|' _pat )+ ')'

_apat_ ::=
	 op_pat
	| access_pat
	| constant_pat
	| wild_pat
	| list_pat
	| vector_pat
	| rec_unit_pat
	| rec_pat

op_pat ::=
	 'op' _full_ident

access_pat ::=
	 'op'? ident '.' qident

constant_pat ::=
	 _constant

wild_pat ::=
	 '_'

list_pat ::=
	 '[' ']'
	| '[' _pat ( ',' _pat )* ']'

vector_pat ::=
	 '#[' ']'
	| '#[' _pat ( ',' _pat )* ']'

rec_unit_pat ::=
	 '{' '}'

rec_pat ::=
	 '{' plabels '}'

plabels ::=
	 plabel ( ',' plabel )* ( ',' '...' )?
	| '...'

plabel ::=
	 selector '=' _pat
	| _full_ident ( ':' _ty )? ( 'as' _pat )?

match ::=
	 rule ( '|' rule )*

rule ::=
	 _pat '=>' _exp

_exp ::=
	 handle_exp
	| orelse_exp
	| andalso_exp
	| constraint_exp
	| app_exp
	| fn_exp
	| case_exp
	| while_exp
	| if_exp
	| raise_exp

handle_exp ::=
	 _exp 'handle' match

orelse_exp ::=
	 _exp 'orelse' _exp

andalso_exp ::=
	 _exp 'andalso' _exp

constraint_exp ::=
	 _exp ':' _ty

app_exp ::=
	 ( _aexp | var_exp )+

fn_exp ::=
	 'fn' match

case_exp ::=
	 'case' _exp 'of' match

while_exp ::=
	 'while' _exp 'do' _exp

if_exp ::=
	 'if' _exp 'then' _exp 'else' _exp

raise_exp ::=
	 'raise' _exp

var_exp ::=
	 _full_ident

_aexp ::=
	 op_exp
	| access_exp
	| constant_exp
	| selector_exp
	| rec_exp
	| rec_unit_exp
	| tuple_unit_exp
	| seq_exp
	| tuple_exp
	| list_exp
	| vector_exp
	| let_exp

op_exp ::=
	 'op' _full_ident

access_exp ::=
	 'op'? ident '.' qident

constant_exp ::=
	 _constant

selector_exp ::=
	 '#' selector

rec_exp ::=
	 '{' elabel ( ',' elabel )* '}'

elabel ::=
	 selector '=' _exp

rec_unit_exp ::=
	 '{' '}'

tuple_unit_exp ::=
	 '(' ')'

seq_exp ::=
	 '(' _exp ( ';' _exp )* ')'

tuple_exp ::=
	 '(' _exp ( ',' _exp )+ ')'

list_exp ::=
	 '[' ']'
	| '[' _exp ( ',' _exp )* ']'

vector_exp ::=
	 '#[' ']'
	| '#[' _exp ( ',' _exp )* ']'

let_exp ::=
	 'let' ( _ldec | ';' | local_dec_let )* 'in' _exp ( ';' _exp )* 'end'

local_dec_let ::=
	 'local' ( _ldec | ';' | local_dec_let )* 'in' ( _ldec | ';' | local_dec_let )* 'end'

_constant ::=
	 int_constant
	| word_constant
	| float_constant
	| char_constant
	| string_constant

int_constant ::=
	 '~'?[0-9]+|'~'?'0x'[0-9A-Fa-f]+

word_constant ::=
	 '0w'[0-9]+|'0wx'[0-9A-Fa-f]+

float_constant ::=
	 '~'?[0-9]+'.'[0-9]+([Ee]'~'?[0-9]+)?

char_constant ::=
	 character

string_constant ::=
	 string

_ty ::=
	 tuple_ty
	| arrow_ty
	| _ty_

tuple_ty ::=
	 _ty_ ( '*' _ty_ )+

arrow_ty ::=
	 _ty '->' _ty

_ty_ ::=
	 var_ty
	| rec_ty
	| mark_ty
	| paren_ty

var_ty ::=
	 tyvar

rec_ty ::=
	 '{' '}'
	| '{' tlabel ( ',' tlabel )* '}'

tlabel ::=
	 selector ':' _ty

mark_ty ::=
	 ( _ty_ | '(' _ty ( ',' _ty )+ ')' )? con_ty

con_ty ::=
	 qident

paren_ty ::=
	 '(' _ty ')'

tyvar_seq ::=
	 tyvar
	| '(' tyvar ( ',' tyvar )+ ')'

selector ::=
	 _full_ident
	| [0-9]+

tyvar ::=
	 "'"[A-Za-z0-9_']+

ident ::=
	 [A-Za-z][A-Za-z0-9_']*

symbolic ::=
	 [!%&$#x23+#x2D-/:<=>?@\~`^|*][!%&$#x23+#x2D-/:<=>?@\~`^|*][!%&$#x23+#x2D-/:<=>?@\~`^|*]+
	| [!%&$#x23+/<>?@\~`^|*][!%&$#x23+#x2D-/:<=>?@\~`^|*]
	| [#x2D-:=][!%&$#x23+#x2D-/:<=?@\~`^|*]
	| [!%&$+#x2D-/<=>?@\~`^*]

_full_ident ::=
	 ident
	| symbolic

qident ::=
	 ( ident '.' )* _full_ident

