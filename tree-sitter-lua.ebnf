//
// From tree-sitter-lua/src/grammar.json
//
//
// EBNF to generate railroad diagram at 
//      (IPV6) https://www.bottlecaps.de/rr/ui
//      (IPV4) https://rr.red-dove.com/ui
//

chunk ::=
	 shebang? _block?

shebang ::=
	 '#!.'*

block ::=
	 _block

_block ::=
	 return_statement
	| statement+ return_statement?

return_statement ::=
	 'return' expression_list? empty_statement?

statement ::=
	 empty_statement
	| variable_assignment
	| local_variable_declaration
	| call
	| label_statement
	| goto_statement
	| break_statement
	| do_statement
	| while_statement
	| repeat_statement
	| if_statement
	| for_numeric_statement
	| for_generic_statement
	| function_definition_statement
	| local_function_definition_statement

local_function_definition_statement ::=
	 'local' 'function' identifier _function_body

function_definition_statement ::=
	 'function' ( identifier | _table_function_variable ) _function_body

_table_function_variable ::=
	 _table_identifier ( _named_field_identifier | _method_identifier )

_table_identifier ::=
	 ( identifier | _table_field_variable )

_table_field_variable ::=
	 _table_identifier _named_field_identifier

for_generic_statement ::=
	 'for' _name_list 'in' _value_list 'do' block? 'end'

_name_list ::=
	 identifier ( ',' identifier )*

_value_list ::=
	 expression ( ',' expression )*

for_numeric_statement ::=
	 'for' identifier '=' expression ',' expression ( ',' expression )? 'do' block? 'end'

if_statement ::=
	 'if' expression 'then' block? elseif_clause* else_clause? 'end'

elseif_clause ::=
	 'elseif' expression 'then' block?

else_clause ::=
	 'else' block?

repeat_statement ::=
	 'repeat' block? 'until' expression

while_statement ::=
	 'while' expression 'do' block? 'end'

do_statement ::=
	 'do' block? 'end'

break_statement ::=
	 'break'

goto_statement ::=
	 'goto' identifier

label_statement ::=
	 '::' identifier '::'

local_variable_declaration ::=
	 'local' _local_variable_list ( '=' _value_list )?

_local_variable_list ::=
	 _local_variable ( ',' _local_variable )*

_local_variable ::=
	 identifier attribute?

attribute ::=
	 '<' identifier '>'

variable_assignment ::=
	 variable_list '=' _value_list

variable_list ::=
	 variable ( ',' variable )*

empty_statement ::=
	 ';'

expression ::=
	 nil
	| false
	| true
	| number
	| string
	| vararg_expression
	| function_definition
	| prefix_expression
	| table
	| unary_expression
	| binary_expression

binary_expression ::=
	 expression 'or' expression
	| expression 'and' expression
	| expression '==' expression
	| expression '~=' expression
	| expression '<' expression
	| expression '>' expression
	| expression '<=' expression
	| expression '>=' expression
	| expression '|' expression
	| expression '~' expression
	| expression '&' expression
	| expression '<<' expression
	| expression '>>' expression
	| expression '+' expression
	| expression '-' expression
	| expression '*' expression
	| expression '/' expression
	| expression '//' expression
	| expression '%' expression
	| expression '..' expression
	| expression '^' expression

unary_expression ::=
	 'not' expression
	| '#' expression
	| '-' expression
	| '~' expression

table ::=
	 '{' field_list? '}'

field_list ::=
	 field ( field_separator field )* field_separator?

field ::=
	 ( ( identifier | '[' expression ']' ) '=' )? expression

field_separator ::=
	 ','
	| ';'

prefix ::=
	 variable
	| call
	| parenthesized_expression

prefix_expression ::=
	 prefix

_prefix_expression ::=
	 prefix

parenthesized_expression ::=
	 '(' expression ')'

call ::=
	 ( _prefix_expression | _table_method_variable ) argument_list

_table_method_variable ::=
	 prefix_expression _method_identifier

_method_identifier ::=
	 ':' identifier

argument_list ::=
	 '(' expression_list? ')'
	| table
	| string

expression_list ::=
	 expression ( ',' expression )*

variable ::=
	 identifier
	| _table_variable

_table_variable ::=
	 ( identifier | _table_variable | call | parenthesized_expression ) ( _indexed_field_identifier | _named_field_identifier )

_named_field_identifier ::=
	 '.' identifier

_indexed_field_identifier ::=
	 '[' expression ']'

function_definition ::=
	 'function' _function_body

_function_body ::=
	 '(' parameter_list? ')' block? 'end'

parameter_list ::=
	 identifier ( ',' identifier )* ( ',' vararg_expression )?
	| vararg_expression

vararg_expression ::=
	 '...'

string ::=
	 _string_start _string_content? _string_end

number ::=
	 ( '-'? ( ( [0-9]+ | [0-9]+ '.' [0-9]* | [0-9]* '.' [0-9]+ ) ( ( 'e' | 'E' ) ( '+' | '-' )? [0-9]+ )? | ( '0x' | '0X' ) ( [0-9a-fA-F]+ | [0-9a-fA-F]+ '.' [0-9a-fA-F]* | [0-9a-fA-F]* '.' [0-9a-fA-F]+ ) ( ( 'p' | 'P' ) ( '+' | '-' )? [0-9]+ )? ) )

true ::=
	 'true'

false ::=
	 'false'

nil ::=
	 'nil'

identifier ::=
	 [a-zA-Z_][0-9a-zA-Z_]*

comment ::=
	 _comment_start _comment_content? _comment_end

