//
// From tree-sitter-nix/src/grammar.json
//
//
// EBNF to generate railroad diagram at 
//      (IPV6) https://www.bottlecaps.de/rr/ui
//      (IPV4) https://rr.red-dove.com/ui
//

source_code ::=
	 _expression

_expression ::=
	 _expr_function_expression

keyword ::=
	 'if'|'then'|'else'|'let'|'inherit'|'in'|'rec'|'with'|'assert'

identifier ::=
	 [a-zA-Z_][a-zA-Z0-9_\'#x2D-]*

variable_expression ::=
	 identifier

integer_expression ::=
	 [0-9]+

float_expression ::=
	 (([1-9][0-9]*'.'[0-9]*)|('0'?'.'[0-9]+))([Ee][+-]?[0-9]+)?

path_expression ::=
	 _path_start ( path_fragment | _immediate_interpolation )*

_hpath_start ::=
	 '\~\/'[a-zA-Z0-9._#x2D-\+\/]+

hpath_expression ::=
	 _hpath_start ( path_fragment | _immediate_interpolation )*

spath_expression ::=
	 '<'[a-zA-Z0-9._#x2D-\+]+('\/'[a-zA-Z0-9._#x2D-\+]+)*'>'

uri_expression ::=
	 [a-zA-Z][a-zA-Z0-9\+#x2D-.]*':'[a-zA-Z0-9%\/\?:@\&=\+\$,#x2D-_.\!\~\*\']+

_expr_function_expression ::=
	 function_expression
	| assert_expression
	| with_expression
	| let_expression
	| _expr_if

function_expression ::=
	 identifier ':' _expr_function_expression
	| formals ':' _expr_function_expression
	| formals '@' identifier ':' _expr_function_expression
	| identifier '@' formals ':' _expr_function_expression

formals ::=
	 '{' '}'
	| '{' formal ( ',' formal )* '}'
	| '{' formal ( ',' formal )* ',' ellipses '}'
	| '{' ellipses '}'

formal ::=
	 identifier ( '?' _expression )?

ellipses ::=
	 '...'

assert_expression ::=
	 'assert' _expression ';' _expr_function_expression

with_expression ::=
	 'with' _expression ';' _expr_function_expression

let_expression ::=
	 'let' binding_set? 'in' _expr_function_expression

_expr_if ::=
	 if_expression
	| _expr_op

if_expression ::=
	 'if' _expression 'then' _expression 'else' _expression

_expr_op ::=
	 has_attr_expression
	| unary_expression
	| binary_expression
	| _expr_apply_expression

has_attr_expression ::=
	 _expr_op '?' attrpath

unary_expression ::=
	 '!' _expr_op
	| '-' _expr_op

binary_expression ::=
	 _expr_op '==' _expr_op
	| _expr_op '!=' _expr_op
	| _expr_op '<' _expr_op
	| _expr_op '<=' _expr_op
	| _expr_op '>' _expr_op
	| _expr_op '>=' _expr_op
	| _expr_op '&&' _expr_op
	| _expr_op '||' _expr_op
	| _expr_op '+' _expr_op
	| _expr_op '-' _expr_op
	| _expr_op '*' _expr_op
	| _expr_op '/' _expr_op
	| _expr_op '->' _expr_op
	| _expr_op '//' _expr_op
	| _expr_op '++' _expr_op

_expr_apply_expression ::=
	 apply_expression
	| _expr_select_expression

apply_expression ::=
	 _expr_apply_expression _expr_select_expression

_expr_select_expression ::=
	 select_expression
	| _expr_simple

select_expression ::=
	 _expr_simple '.' attrpath
	| _expr_simple '.' attrpath 'or' _expr_select_expression

_expr_simple ::=
	 variable_expression
	| integer_expression
	| float_expression
	| string_expression
	| indented_string_expression
	| path_expression
	| hpath_expression
	| spath_expression
	| uri_expression
	| parenthesized_expression
	| attrset_expression
	| let_attrset_expression
	| rec_attrset_expression
	| list_expression

parenthesized_expression ::=
	 '(' _expression ')'

attrset_expression ::=
	 '{' binding_set? '}'

let_attrset_expression ::=
	 'let' '{' binding_set? '}'

rec_attrset_expression ::=
	 'rec' '{' binding_set? '}'

string_expression ::=
	 '"'  ( string_fragment | interpolation | escape_sequence | dollar_escape '$' )* '"' 

escape_sequence ::=
	 '\'([^$]|[ #x09#x0A#x0B#x0C#x0D])

indented_string_expression ::=
	 "''" ( _indented_string_fragment | interpolation | _indented_escape_sequence | _indented_dollar_escape '$' )* "''"

_indented_escape_sequence ::=
	 "'''"|"''\"([^$]|[ #x09#x0A#x0B#x0C#x0D])

binding_set ::=
	 ( binding | inherit | inherit_from )+

binding ::=
	 attrpath '=' _expression ';'

inherit ::=
	 'inherit' inherited_attrs ';'

inherit_from ::=
	 'inherit' '(' _expression ')' inherited_attrs ';'

attrpath ::=
	 ( identifier | string_expression | interpolation ) ( '.' ( identifier | string_expression | interpolation ) )*

inherited_attrs ::=
	 ( identifier | string_expression | interpolation )+

_immediate_interpolation ::=
	 '${' _expression '}'

interpolation ::=
	 '${' _expression '}'

list_expression ::=
	 '[' _expr_select_expression* ']'

comment ::=
	 ( '#' '.'* | '/*' [^*]*'\'*+([^/*][^*]*'\'*+)* '/' )

