//
// From tree-sitter-fennel/src/grammar.json
//
//
// EBNF to generate railroad diagram at 
//      (IPV6) https://www.bottlecaps.de/rr/ui
//      (IPV4) https://rr.red-dove.com/ui
//

program ::=
	 _sexp*

_sexp ::=
	 _special_form
	| symbol
	| multi_symbol
	| list
	| sequential_table
	| table
	| _literal

_special_form ::=
	 fn
	| lambda
	| hashfn
	| match
	| let
	| global
	| local
	| var
	| set
	| each
	| collect
	| icollect
	| accumulate
	| for
	| quote

each ::=
	 '(' 'each' '[' iter_bindings ']' _sexp* ')'

iter_bindings ::=
	 _binding* _sexp ( ':until' _sexp )?

for ::=
	 '(' 'for' for_clause _sexp* ')'

for_clause ::=
	 '[' symbol _sexp _sexp _sexp? ']'

let ::=
	 '(' 'let' let_clause _sexp* ')'

let_clause ::=
	 '[' ( _binding _sexp )* ']'

global ::=
	 '(' 'global' _binding _sexp ')'

local ::=
	 '(' 'local' _binding _sexp ')'

var ::=
	 '(' 'var' _binding _sexp ')'

set ::=
	 '(' 'set' _assignment _sexp ')'

_binding ::=
	 multi_value_binding
	| _non_multi_value_binding

multi_value_binding ::=
	 '(' _non_multi_value_binding* ')'

_non_multi_value_binding ::=
	 binding
	| sequential_table_binding
	| table_binding

binding ::=
	 symbol

sequential_table_binding ::=
	 '[' _non_multi_value_binding* ( '&' binding )? ']'

table_binding ::=
	 '{' ( ':' binding | '&as' binding | _sexp _non_multi_value_binding )* '}'

_assignment ::=
	 multi_value_assignment
	| _non_multi_value_assignment

multi_value_assignment ::=
	 '(' _non_multi_value_assignment* ')'

_non_multi_value_assignment ::=
	 assignment
	| sequential_table_assignment
	| table_assignment

assignment ::=
	 symbol
	| multi_symbol

sequential_table_assignment ::=
	 '[' _non_multi_value_assignment* ']'

table_assignment ::=
	 '{' ( ':' assignment | _sexp _non_multi_value_assignment )* '}'

hashfn ::=
	 '(' 'hashfn' _sexp* ')'
	| '#' _sexp

fn ::=
	 '(' 'fn' _function_body ')'

lambda ::=
	 '(' ( 'lambda' | 'Î»' ) _function_body ')'

_function_body ::=
	 ( symbol | multi_symbol )? parameters ( string? _sexp+ )?

parameters ::=
	 '[' ( _binding | vararg )* ']'

match ::=
	 '(' 'match' _sexp ( _pattern _sexp )* ')'

_pattern ::=
	 _simple_pattern
	| where_pattern
	| guard_pattern

_simple_pattern ::=
	 multi_value_pattern
	| _non_multi_value_pattern

guard_pattern ::=
	 '(' _simple_pattern '?' _sexp+ ')'

where_pattern ::=
	 '(' 'where' ( _simple_pattern | '(' 'or' _simple_pattern* ')' ) _sexp* ')'

multi_value_pattern ::=
	 '(' _non_multi_value_pattern* ')'

_non_multi_value_pattern ::=
	 _literal
	| symbol
	| multi_symbol
	| sequential_table_pattern
	| table_pattern

sequential_table_pattern ::=
	 '[' _non_multi_value_pattern* ']'

table_pattern ::=
	 '{' ( ':' _simple_pattern | _sexp _non_multi_value_pattern )* '}'

collect ::=
	 '(' 'collect' '[' iter_bindings ']' _sexp* ')'

icollect ::=
	 '(' 'icollect' '[' iter_bindings ']' _sexp* ')'

accumulate ::=
	 '(' 'accumulate' '[' _binding _sexp iter_bindings ']' _sexp* ')'

quote ::=
	 '(' 'quote' _quoted_sexp ')'
	| ( "'"  | '`' ) _quoted_sexp

unquote ::=
	 ',' _sexp

_quoted_sexp ::=
	 unquote
	| symbol
	| multi_symbol
	| multi_symbol_method
	| quoted_list
	| quoted_sequential_table
	| quoted_table
	| _literal

quoted_list ::=
	 '(' _quoted_sexp* ')'

quoted_sequential_table ::=
	 '[' _quoted_sexp* ']'

quoted_table ::=
	 '{' _quoted_sexp* '}'

list ::=
	 '(' ( _sexp | multi_symbol_method ) _sexp* ')'

sequential_table ::=
	 '[' _sexp* ']'

table_pair ::=
	 ':' binding | string _sexp | ( symbol | multi_symbol ) _sexp

table ::=
	 '{' table_pair* '}'

_literal ::=
	 string
	| number
	| boolean
	| vararg
	| nil
	| nil_safe

nil ::=
	 'nil'

nil_safe ::=
	 '?.'

vararg ::=
	 '...'

boolean ::=
	 'true'
	| 'false'

string ::=
	 ':'[^(){}#x5B#x5D"'~;,@` #x09#x0A#x0B#x0C#x0D]+
	| '"'  ( [^"\]+ | escape_sequence )* '"' 

escape_sequence ::=
	 ( '\\'  ( [^xu0-9] | [0-9]'{1,3}' | 'x'[0-9a-fA-F]'{2}' | 'u{'[0-9a-fA-F]+'}' ) )

number ::=
	 ( ( '-' | '+' )? ( [0-9][_0-9]* | '.' [0-9][_0-9]* | [0-9][_0-9]* '.' [0-9][_0-9]*? ) ( ( 'e' | 'E' ) ( '-' | '+' )? [0-9][_0-9]* )? | ( '-' | '+' )? ( '0x' | '0X' ) ( [a-fA-F0-9][_a-fA-F0-9]* | '.' [a-fA-F0-9][_a-fA-F0-9]* | [a-fA-F0-9][_a-fA-F0-9]* '.' [a-fA-F0-9][_a-fA-F0-9]*? ) ( ( 'p' | 'P' ) ( '-' | '+' )? [a-fA-F0-9][_a-fA-F0-9]* )? )

multi_symbol ::=
	 symbol ( '.' symbol_immediate )+

multi_symbol_method ::=
	 ( symbol | multi_symbol ) ':' symbol_immediate

symbol ::=
	 ( ':' | '.' [^(){}#x5B#x5D"'~;,@` #x09#x0A#x0B#x0C#x0D]* | [^#x23(){}#x5B#x5D"'~;,@`.: #x09#x0A#x0B#x0C#x0D][^(){}#x5B#x5D"'~;,@`.: #x09#x0A#x0B#x0C#x0D]* )

symbol_immediate ::=
	 ( ':' | '.' [^(){}#x5B#x5D"'~;,@` #x09#x0A#x0B#x0C#x0D]* | [^#x23(){}#x5B#x5D"'~;,@`.: #x09#x0A#x0B#x0C#x0D][^(){}#x5B#x5D"'~;,@`.: #x09#x0A#x0B#x0C#x0D]* )

comment ::=
	 ( ';' '.'* )

