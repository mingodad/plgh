//
// From tree-sitter-wgsl/src/grammar.json
//
//
// EBNF to generate railroad diagram at 
//      (IPV6) https://www.bottlecaps.de/rr/ui
//      (IPV4) https://rr.red-dove.com/ui
//

translation_unit ::=
	 global_directive+? global_decl+?

global_directive ::=
	 enable_directive

global_decl ::=
	 semicolon
	| global_variable_decl semicolon
	| global_constant_decl semicolon
	| type_alias_decl semicolon
	| struct_decl
	| function_decl
	| static_assert_statement semicolon

bool_literal ::=
	 true
	| false

int_literal ::=
	 '0'[xX][0-9a-fA-F]+[iu]?
	| '0'[iu]?
	| [1-9][0-9]*[iu]?

float_literal ::=
	 decimal_float_literal
	| hex_float_literal

decimal_float_literal ::=
	 [0-9]*'.'[0-9]+([eE]('\'+|'-')?[0-9]+)?[fh]?
	| [0-9]+'.'[0-9]*([eE]('\'+|'-')?[0-9]+)?[fh]?
	| [0-9]+[eE]('\'+|'-')?[0-9]+[fh]?
	| '0'[fh]
	| [1-9][0-9]*[fh]

hex_float_literal ::=
	 '0'[xX][0-9a-fA-F]*'.'[0-9a-fA-F]+([pP]('\'+|'-')?[0-9]+[fh]?)?
	| '0'[xX][0-9a-fA-F]+'.'[0-9a-fA-F]*([pP]('\'+|'-')?[0-9]+[fh]?)?
	| '0'[xX][0-9a-fA-F]+[pP]('\'+|'-')?[0-9]+[fh]?

const_literal ::=
	 int_literal
	| float_literal
	| bool_literal

attribute ::=
	 attr ident paren_left ( literal_or_ident comma )+? literal_or_ident comma? paren_right
	| attr ident

literal_or_ident ::=
	 float_literal
	| int_literal
	| ident

array_type_decl ::=
	 array less_than type_decl ( comma element_count_expression )? greater_than

element_count_expression ::=
	 additive_expression
	| bitwise_expression

struct_decl ::=
	 struct ident struct_body_decl

struct_body_decl ::=
	 brace_left ( struct_member comma )+? struct_member comma? brace_right

struct_member ::=
	 attribute+? variable_ident_decl

address_space ::=
	 function
	| private
	| workgroup
	| uniform
	| storage

texture_sampler_types ::=
	 sampler_type
	| depth_texture_type
	| sampled_texture_type less_than type_decl greater_than
	| multisampled_texture_type less_than type_decl greater_than
	| storage_texture_type less_than texel_format comma access_mode greater_than

sampler_type ::=
	 sampler
	| sampler_comparison

sampled_texture_type ::=
	 texture_1d
	| texture_2d
	| texture_2d_array
	| texture_3d
	| texture_cube
	| texture_cube_array

multisampled_texture_type ::=
	 texture_multisampled_2d

storage_texture_type ::=
	 texture_storage_1d
	| texture_storage_2d
	| texture_storage_2d_array
	| texture_storage_3d

depth_texture_type ::=
	 texture_depth_2d
	| texture_depth_2d_array
	| texture_depth_cube
	| texture_depth_cube_array
	| texture_depth_multisampled_2d

type_alias_decl ::=
	 type ident equal type_decl

type_decl ::=
	 ident
	| type_decl_without_ident

type_decl_without_ident ::=
	 bool
	| float32
	| float16
	| int32
	| uint32
	| vec_prefix less_than type_decl greater_than
	| mat_prefix less_than type_decl greater_than
	| pointer less_than address_space comma type_decl ( comma access_mode )? greater_than
	| array_type_decl
	| atomic less_than type_decl greater_than
	| texture_sampler_types

vec_prefix ::=
	 vec2
	| vec3
	| vec4

mat_prefix ::=
	 mat2x2
	| mat2x3
	| mat2x4
	| mat3x2
	| mat3x3
	| mat3x4
	| mat4x2
	| mat4x3
	| mat4x4

variable_statement ::=
	 variable_decl
	| variable_decl equal expression
	| let ( ident | variable_ident_decl ) equal expression
	| const ( ident | variable_ident_decl ) equal expression

variable_decl ::=
	 var variable_qualifier? ( ident | variable_ident_decl )

variable_ident_decl ::=
	 ident colon type_decl

variable_qualifier ::=
	 less_than address_space ( comma access_mode )? greater_than

global_variable_decl ::=
	 attribute+? variable_decl ( equal expression )?

global_constant_decl ::=
	 const ( ident | variable_ident_decl ) equal expression
	| attribute+? override ( ident | variable_ident_decl ) ( equal expression )?

primary_expression ::=
	 ident
	| callable argument_expression_list
	| const_literal
	| paren_expression
	| bitcast less_than type_decl greater_than paren_expression

callable ::=
	 ident
	| type_decl_without_ident
	| vec_prefix
	| mat_prefix

paren_expression ::=
	 paren_left expression paren_right

argument_expression_list ::=
	 paren_left ( ( expression comma )+? expression comma? )? paren_right

postfix_expression ::=
	 bracket_left expression bracket_right postfix_expression?
	| period ident postfix_expression?

unary_expression ::=
	 singular_expression
	| minus unary_expression
	| bang unary_expression
	| tilde unary_expression
	| star unary_expression
	| and unary_expression

singular_expression ::=
	 primary_expression postfix_expression?

lhs_expression ::=
	 ( star | and )+? core_lhs_expression postfix_expression?

core_lhs_expression ::=
	 ident
	| paren_left lhs_expression paren_right

multiplicative_expression ::=
	 unary_expression
	| multiplicative_expression star unary_expression
	| multiplicative_expression forward_slash unary_expression
	| multiplicative_expression modulo unary_expression

additive_expression ::=
	 multiplicative_expression
	| additive_expression plus multiplicative_expression
	| additive_expression minus multiplicative_expression

relational_expression ::=
	 additive_expression
	| additive_expression less_than additive_expression
	| additive_expression greater_than additive_expression
	| additive_expression less_than_equal additive_expression
	| additive_expression greater_than_equal additive_expression
	| additive_expression equal_equal additive_expression
	| additive_expression not_equal additive_expression

short_circuit_and_expression ::=
	 relational_expression
	| short_circuit_and_expression and_and relational_expression

short_circuit_or_expression ::=
	 relational_expression
	| short_circuit_or_expression or_or relational_expression

binary_or_expression ::=
	 unary_expression
	| binary_or_expression or unary_expression

binary_and_expression ::=
	 unary_expression
	| binary_and_expression and unary_expression

binary_xor_expression ::=
	 unary_expression
	| binary_xor_expression xor unary_expression

bitwise_expression ::=
	 binary_and_expression and unary_expression
	| binary_or_expression or unary_expression
	| binary_xor_expression xor unary_expression

expression ::=
	 relational_expression
	| short_circuit_or_expression or_or relational_expression
	| short_circuit_and_expression and_and relational_expression
	| bitwise_expression

compound_statement ::=
	 brace_left statement+? brace_right

assignment_statement ::=
	 lhs_expression ( equal | compound_assignment_operator ) expression
	| underscore equal expression

compound_assignment_operator ::=
	 plus_equal
	| minus_equal
	| times_equal
	| division_equal
	| modulo_equal
	| and_equal
	| or_equal
	| xor_equal

increment_statement ::=
	 lhs_expression plus_plus

decrement_statement ::=
	 lhs_expression minus_minus

if_statement ::=
	 if expression compound_statement ( else else_statement )?

else_statement ::=
	 compound_statement
	| if_statement

switch_statement ::=
	 switch expression brace_left switch_body+ brace_right

switch_body ::=
	 case case_selectors colon? case_compound_statement
	| default colon? case_compound_statement

case_selectors ::=
	 expression ( comma expression )+? comma?

case_compound_statement ::=
	 brace_left statement+? fallthrough_statement? brace_right

fallthrough_statement ::=
	 fallthrough semicolon

loop_statement ::=
	 loop brace_left statement+? continuing_statement? brace_right

for_statement ::=
	 for paren_left for_header paren_right compound_statement

for_header ::=
	 for_init? semicolon expression? semicolon for_update?

for_init ::=
	 variable_statement
	| increment_statement
	| decrement_statement
	| assignment_statement
	| func_call_statement

for_update ::=
	 increment_statement
	| decrement_statement
	| assignment_statement
	| func_call_statement

while_statement ::=
	 while expression compound_statement

break_statement ::=
	 break

break_if_statement ::=
	 break if expression semicolon

continue_statement ::=
	 continue

continuing_statement ::=
	 continuing continuing_compound_statement

continuing_compound_statement ::=
	 brace_left statement+? break_if_statement? brace_right

return_statement ::=
	 return expression?

func_call_statement ::=
	 ident argument_expression_list

static_assert_statement ::=
	 staticAssert expression

statement ::=
	 semicolon
	| return_statement semicolon
	| if_statement
	| switch_statement
	| loop_statement
	| for_statement
	| while_statement
	| func_call_statement semicolon
	| variable_statement semicolon
	| break_statement semicolon
	| continue_statement semicolon
	| discard semicolon
	| assignment_statement semicolon
	| compound_statement
	| increment_statement semicolon
	| decrement_statement semicolon
	| static_assert_statement semicolon

function_decl ::=
	 attribute+? function_header compound_statement

function_header ::=
	 fn ident paren_left param_list? paren_right ( arrow attribute+? type_decl )?

param_list ::=
	 ( param comma )+? param comma?

param ::=
	 attribute+? variable_ident_decl

enable_directive ::=
	 enable ident semicolon

access_mode ::=
	 'read'
	| 'write'
	| 'read_write'

texel_format ::=
	 'rgba8unorm'
	| 'rgba8snorm'
	| 'rgba8uint'
	| 'rgba8sint'
	| 'rgba16uint'
	| 'rgba16sint'
	| 'rgba16float'
	| 'r32uint'
	| 'r32sint'
	| 'r32float'
	| 'rg32uint'
	| 'rg32sint'
	| 'rg32float'
	| 'rgba32uint'
	| 'rgba32sint'
	| 'rgba32float'

array ::=
	 'array'

atomic ::=
	 'atomic'

bool ::=
	 'bool'

float32 ::=
	 'f32'

float16 ::=
	 'f16'

int32 ::=
	 'i32'

mat2x2 ::=
	 'mat2x2'

mat2x3 ::=
	 'mat2x3'

mat2x4 ::=
	 'mat2x4'

mat3x2 ::=
	 'mat3x2'

mat3x3 ::=
	 'mat3x3'

mat3x4 ::=
	 'mat3x4'

mat4x2 ::=
	 'mat4x2'

mat4x3 ::=
	 'mat4x3'

mat4x4 ::=
	 'mat4x4'

override ::=
	 'override'

pointer ::=
	 'ptr'

sampler ::=
	 'sampler'

sampler_comparison ::=
	 'sampler_comparison'

staticAssert ::=
	 'staticAssert'

struct ::=
	 'struct'

texture_1d ::=
	 'texture_1d'

texture_2d ::=
	 'texture_2d'

texture_2d_array ::=
	 'texture_2d_array'

texture_3d ::=
	 'texture_3d'

texture_cube ::=
	 'texture_cube'

texture_cube_array ::=
	 'texture_cube_array'

texture_multisampled_2d ::=
	 'texture_multisampled_2d'

texture_storage_1d ::=
	 'texture_storage_1d'

texture_storage_2d ::=
	 'texture_storage_2d'

texture_storage_2d_array ::=
	 'texture_storage_2d_array'

texture_storage_3d ::=
	 'texture_storage_3d'

texture_depth_2d ::=
	 'texture_depth_2d'

texture_depth_2d_array ::=
	 'texture_depth_2d_array'

texture_depth_cube ::=
	 'texture_depth_cube'

texture_depth_cube_array ::=
	 'texture_depth_cube_array'

texture_depth_multisampled_2d ::=
	 'texture_depth_multisampled_2d'

uint32 ::=
	 'u32'

vec2 ::=
	 'vec2'

vec3 ::=
	 'vec3'

vec4 ::=
	 'vec4'

bitcast ::=
	 'bitcast'

break ::=
	 'break'

case ::=
	 'case'

const ::=
	 'const'

continue ::=
	 'continue'

continuing ::=
	 'continuing'

default ::=
	 'default'

discard ::=
	 'discard'

else ::=
	 'else'

enable ::=
	 'enable'

fallthrough ::=
	 'fallthrough'

false ::=
	 'false'

fn ::=
	 'fn'

for ::=
	 'for'

function ::=
	 'function'

if ::=
	 'if'

let ::=
	 'let'

loop ::=
	 'loop'

private ::=
	 'private'

return ::=
	 'return'

storage ::=
	 'storage'

switch ::=
	 'switch'

true ::=
	 'true'

type ::=
	 'type'

uniform ::=
	 'uniform'

var ::=
	 'var'

while ::=
	 'while'

workgroup ::=
	 'workgroup'

and ::=
	 '&'

and_and ::=
	 '&&'

arrow ::=
	 '->'

attr ::=
	 '@'

forward_slash ::=
	 '/'

bang ::=
	 '!'

bracket_left ::=
	 '['

bracket_right ::=
	 ']'

brace_left ::=
	 '{'

brace_right ::=
	 '}'

colon ::=
	 ':'

comma ::=
	 ','

equal ::=
	 '='

equal_equal ::=
	 '=='

not_equal ::=
	 '!='

greater_than ::=
	 '>'

greater_than_equal ::=
	 '>='

less_than ::=
	 '<'

less_than_equal ::=
	 '<='

modulo ::=
	 '%'

minus ::=
	 '-'

minus_minus ::=
	 '--'

period ::=
	 '.'

plus ::=
	 '+'

plus_plus ::=
	 '++'

or ::=
	 '|'

or_or ::=
	 '||'

paren_left ::=
	 '('

paren_right ::=
	 ')'

semicolon ::=
	 ';'

star ::=
	 '*'

tilde ::=
	 '~'

underscore ::=
	 '_'

xor ::=
	 '^'

plus_equal ::=
	 '+='

minus_equal ::=
	 '-='

times_equal ::=
	 '*='

division_equal ::=
	 '/='

modulo_equal ::=
	 '%='

and_equal ::=
	 '&='

or_equal ::=
	 '|='

xor_equal ::=
	 '^='

_reserved ::=
	 'AppendStructuredBuffer'
	| 'BlendState'
	| 'Buffer'
	| 'ByteAddressBuffer'
	| 'CompileShader'
	| 'ComputeShader'
	| 'ConsumeStructuredBuffer'
	| 'DepthStencilState'
	| 'DepthStencilView'
	| 'DomainShader'
	| 'GeometryShader'
	| 'Hullshader'
	| 'InputPatch'
	| 'LineStream'
	| 'NULL'
	| 'OutputPatch'
	| 'PixelShader'
	| 'PointStream'
	| 'RWBuffer'
	| 'RWByteAddressBuffer'
	| 'RWStructuredBuffer'
	| 'RWTexture1D'
	| 'RWTexture1DArray'
	| 'RWTexture2D'
	| 'RWTexture2DArray'
	| 'RWTexture3D'
	| 'RasterizerState'
	| 'RenderTargetView'
	| 'SamplerComparisonState'
	| 'SamplerState'
	| 'Self'
	| 'StructuredBuffer'
	| 'Texture1D'
	| 'Texture1DArray'
	| 'Texture2D'
	| 'Texture2DArray'
	| 'Texture2DMS'
	| 'Texture2DMSArray'
	| 'Texture3D'
	| 'TextureCube'
	| 'TextureCubeArray'
	| 'TriangleStream'
	| 'VertexShader'
	| 'abstract'
	| 'active'
	| 'alignas'
	| 'alignof'
	| 'as'
	| 'asm'
	| 'asm_fragment'
	| 'async'
	| 'atomic_uint'
	| 'attribute'
	| 'auto'
	| 'await'
	| 'become'
	| 'bf16'
	| 'binding_array'
	| 'cast'
	| 'catch'
	| 'cbuffer'
	| 'centroid'
	| 'char'
	| 'class'
	| 'co_await'
	| 'co_return'
	| 'co_yield'
	| 'coherent'
	| 'column_major'
	| 'common'
	| 'compile'
	| 'compile_fragment'
	| 'concept'
	| 'const_cast'
	| 'consteval'
	| 'constexpr'
	| 'constinit'
	| 'crate'
	| 'debugger'
	| 'decltype'
	| 'delete'
	| 'demote'
	| 'demote_to_helper'
	| 'do'
	| 'dword'
	| 'dynamic_cast'
	| 'enum'
	| 'explicit'
	| 'export'
	| 'extends'
	| 'extern'
	| 'external'
	| 'f64'
	| 'filter'
	| 'final'
	| 'finally'
	| 'fixed'
	| 'flat'
	| 'friend'
	| 'from'
	| 'fvec2'
	| 'fvec3'
	| 'fvec4'
	| 'fxgroup'
	| 'get'
	| 'goto'
	| 'groupshared'
	| 'handle'
	| 'highp'
	| 'hvec2'
	| 'hvec3'
	| 'hvec4'
	| 'i16'
	| 'i64'
	| 'i8'
	| 'iimage1D'
	| 'iimage1DArray'
	| 'iimage2D'
	| 'iimage2DArray'
	| 'iimage2DMS'
	| 'iimage2DMSArray'
	| 'iimage2DRect'
	| 'iimage3D'
	| 'iimageBuffer'
	| 'iimageCube'
	| 'iimageCubeArray'
	| 'image1D'
	| 'image1DArray'
	| 'image2D'
	| 'image2DArray'
	| 'image2DMS'
	| 'image2DMSArray'
	| 'image2DRect'
	| 'image3D'
	| 'imageBuffer'
	| 'imageCube'
	| 'imageCubeArray'
	| 'impl'
	| 'implements'
	| 'import'
	| 'inline'
	| 'inout'
	| 'instanceof'
	| 'interface'
	| 'invariant'
	| 'isampler1D'
	| 'isampler1DArray'
	| 'isampler2D'
	| 'isampler2DArray'
	| 'isampler2DMS'
	| 'isampler2DMSArray'
	| 'isampler2DRect'
	| 'isampler3D'
	| 'isamplerBuffer'
	| 'isamplerCube'
	| 'isamplerCubeArray'
	| 'isubpassInput'
	| 'isubpassInputMS'
	| 'itexture1D'
	| 'itexture1DArray'
	| 'itexture2D'
	| 'itexture2DArray'
	| 'itexture2DMS'
	| 'itexture2DMSArray'
	| 'itexture2DRect'
	| 'itexture3D'
	| 'itextureBuffer'
	| 'itextureCube'
	| 'itextureCubeArray'
	| 'layout'
	| 'line'
	| 'lineadj'
	| 'linear'
	| 'lowp'
	| 'macro'
	| 'macro_rules'
	| 'mat'
	| 'match'
	| 'matrix'
	| 'mediump'
	| 'meta'
	| 'mod'
	| 'module'
	| 'move'
	| 'mut'
	| 'mutable'
	| 'namespace'
	| 'new'
	| 'nil'
	| 'noexcept'
	| 'noinline'
	| 'nointerpolation'
	| 'noperspective'
	| 'null'
	| 'nullptr'
	| 'of'
	| 'operator'
	| 'package'
	| 'packoffset'
	| 'partition'
	| 'pass'
	| 'patch'
	| 'pixelfragment'
	| 'point'
	| 'precise'
	| 'precision'
	| 'premerge'
	| 'priv'
	| 'protected'
	| 'pub'
	| 'public'
	| 'readonly'
	| 'ref'
	| 'regardless'
	| 'register'
	| 'reinterpret_cast'
	| 'requires'
	| 'resource'
	| 'restrict'
	| 'row_major'
	| 'samper'
	| 'sample'
	| 'sampler1D'
	| 'sampler1DArray'
	| 'sampler1DArrayShadow'
	| 'sampler1DShadow'
	| 'sampler2D'
	| 'sampler2DArray'
	| 'sampler2DArrayShadow'
	| 'sampler2DMS'
	| 'sampler2DMSArray'
	| 'sampler2DRect'
	| 'sampler2DRectShadow'
	| 'sampler2DShadow'
	| 'sampler3D'
	| 'sampler3DRect'
	| 'samplerBuffer'
	| 'samplerCube'
	| 'samplerCubeArray'
	| 'samplerCubeArrayShadow'
	| 'samplerCubeShadow'
	| 'samplerShadow'
	| 'self'
	| 'set'
	| 'shared'
	| 'signed'
	| 'sizeof'
	| 'smooth'
	| 'snorm'
	| 'stateblock'
	| 'stateblock_state'
	| 'static'
	| 'static_assert'
	| 'static_cast'
	| 'std'
	| 'string'
	| 'subpassInput'
	| 'subpassInputMS'
	| 'subroutine'
	| 'super'
	| 'superp'
	| 'target'
	| 'tbuffer'
	| 'technique'
	| 'technique10'
	| 'technique11'
	| 'template'
	| 'texture1D'
	| 'texture1DArray'
	| 'texture2D'
	| 'texture2DArray'
	| 'texture2DMS'
	| 'texture2DMSArray'
	| 'texture2DRect'
	| 'texture3D'
	| 'textureBuffer'
	| 'textureCube'
	| 'textureCubeArray'
	| 'this'
	| 'thread_local'
	| 'throw'
	| 'trait'
	| 'triangle'
	| 'triangleadj'
	| 'try'
	| 'typedef'
	| 'typeid'
	| 'typename'
	| 'typeof'
	| 'u16'
	| 'u64'
	| 'u8'
	| 'uimage1D'
	| 'uimage1DArray'
	| 'uimage2D'
	| 'uimage2DArray'
	| 'uimage2DMS'
	| 'uimage2DMSArray'
	| 'uimage2DRect'
	| 'uimage3D'
	| 'uimageBuffer'
	| 'uimageCube'
	| 'uimageCubeArray'
	| 'union'
	| 'unless'
	| 'unorm'
	| 'unsafe'
	| 'unsigned'
	| 'unsized'
	| 'usampler1D'
	| 'usampler1DArray'
	| 'usampler2D'
	| 'usampler2DArray'
	| 'usampler2DMS'
	| 'usampler2DMSArray'
	| 'usampler2DRect'
	| 'usampler3D'
	| 'usamplerBuffer'
	| 'usamplerCube'
	| 'usamplerCubeArray'
	| 'use'
	| 'using'
	| 'usubpassInput'
	| 'usubpassInputMS'
	| 'utexture1D'
	| 'utexture1DArray'
	| 'utexture2D'
	| 'utexture2DArray'
	| 'utexture2DMS'
	| 'utexture2DMSArray'
	| 'utexture2DRect'
	| 'utexture3D'
	| 'utextureBuffer'
	| 'utextureCube'
	| 'utextureCubeArray'
	| 'varying'
	| 'vec'
	| 'vector'
	| 'vertexfragment'
	| 'virtual'
	| 'void'
	| 'volatile'
	| 'wchar_t'
	| 'wgsl'
	| 'where'
	| 'with'
	| 'writeonly'
	| 'yield'

ident ::=
	 ([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])

_comment ::=
	 '//' '.'*

_blankspace ::=
	 [\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]

