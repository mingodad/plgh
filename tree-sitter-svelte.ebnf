//
// From tree-sitter-svelte/src/grammar.json
//
//
// EBNF to generate railroad diagram at 
//      (IPV6) https://www.bottlecaps.de/rr/ui
//      (IPV4) https://rr.red-dove.com/ui
//

document ::=
	 _node*

_node ::=
	 script_element
	| style_element
	| _statement

_statement ::=
	 comment
	| _text
	| element
	| if_statement
	| key_statement
	| each_statement
	| await_statement

element ::=
	 start_tag _node* ( end_tag | _implicit_end_tag )
	| self_closing_tag

start_tag ::=
	 '<' _start_tag_name attribute* '>'

self_closing_tag ::=
	 '<' _start_tag_name attribute* '/>'

end_tag ::=
	 '</' _end_tag_name '>'

erroneous_end_tag ::=
	 '</' erroneous_end_tag_name '>'

script_element ::=
	 script_start_tag raw_text? end_tag

script_start_tag ::=
	 '<' _script_start_tag_name attribute* '>'

style_element ::=
	 style_start_tag raw_text? end_tag

style_start_tag ::=
	 '<' _style_start_tag_name attribute* '>'

attribute ::=
	 attribute_name ( '=' ( attribute_value | quoted_attribute_value | expr_attribute_value ) )?
	| expression

attribute_name ::=
	 [^<>{}"'/= #x09#x0A#x0B#x0C#x0D]+

attribute_value ::=
	 [^<>{}"'/= #x09#x0A#x0B#x0C#x0D]+

expr_attribute_value ::=
	 expression

quoted_attribute_value ::=
	 "'"  [^']+? "'" 
	| '"'  [^"]+? '"' 

_text ::=
	 [^<>{} #x09#x0A#x0B#x0C#x0D]([^<>{}]*[^<>{} #x09#x0A#x0B#x0C#x0D])?
	| _expression

_expression ::=
	 expression
	| html_expr
	| const_expr
	| '{}'

expression ::=
	 '{' raw_text_expr '}'

html_expr ::=
	 '{' '@' 'html' raw_text_expr? '}'

const_expr ::=
	 '{' '@' 'const' raw_text_expr? '}'

if_statement ::=
	 if_start_expr _node* ( else_if_statement | else_statement | if_end_expr )

else_if_statement ::=
	 else_if_expr _node* ( if_end_expr | else_statement | else_if_statement )

else_statement ::=
	 else_expr _node* if_end_expr

if_start_expr ::=
	 '{' '#' 'if' raw_text_expr '}'

else_expr ::=
	 '{' ':' 'else' '}'

else_if_expr ::=
	 '{' ':' 'else' 'if' raw_text_expr? '}'

if_end_expr ::=
	 '{' '/' 'if' '}'

each_statement ::=
	 each_start_expr _node* ( else_each_statement | each_end_expr )

each_start_expr ::=
	 '{' '#' 'each' ( raw_text_expr | raw_text_each 'as' raw_text_expr ) '}'

else_each_statement ::=
	 else_expr _node* each_end_expr

each_end_expr ::=
	 '{' '/' 'each' '}'

await_statement ::=
	 await_start_expr _node* ( then_statement | catch_statement | await_end_expr )

then_statement ::=
	 then_expr _node* ( await_end_expr | catch_statement )

catch_statement ::=
	 catch_expr _node* await_end_expr

await_start_expr ::=
	 '{' '#' 'await' ( raw_text_expr | raw_text_await 'then' raw_text_expr ) '}'

then_expr ::=
	 '{' ':' 'then' raw_text_expr? '}'

catch_expr ::=
	 '{' ':' 'catch' raw_text_expr? '}'

await_end_expr ::=
	 '{' '/' 'await' '}'

key_statement ::=
	 key_start_expr _node* key_end_expr

key_start_expr ::=
	 '{' '#' 'key' ( raw_text_expr ) '}'

key_end_expr ::=
	 '{' '/' 'key' '}'

