//
// From tree-sitter-javascript/src/grammar.json
//
//
// EBNF to generate railroad diagram at 
//      (IPV6) https://www.bottlecaps.de/rr/ui
//      (IPV4) https://rr.red-dove.com/ui
//

program ::=
	 hash_bang_line? statement*

hash_bang_line ::=
	 '#!.'*

export_statement ::=
	 'export' ( '*' _from_clause | namespace_export _from_clause | export_clause _from_clause | export_clause ) _semicolon
	| decorator* 'export' ( declaration | 'default' ( declaration | expression _semicolon ) )

namespace_export ::=
	 '*' 'as' _module_export_name

export_clause ::=
	 '{' ( export_specifier ( ',' export_specifier )* )? ','? '}'

export_specifier ::=
	 _module_export_name ( 'as' _module_export_name )?

_module_export_name ::=
	 identifier
	| string

declaration ::=
	 function_declaration
	| generator_function_declaration
	| class_declaration
	| lexical_declaration
	| variable_declaration

import ::=
	 'import'

import_statement ::=
	 'import' ( import_clause _from_clause | string ) import_attribute? _semicolon

import_clause ::=
	 namespace_import
	| named_imports
	| identifier ( ',' ( namespace_import | named_imports ) )?

_from_clause ::=
	 'from' string

namespace_import ::=
	 '*' 'as' identifier

named_imports ::=
	 '{' ( import_specifier ( ',' import_specifier )* )? ','? '}'

import_specifier ::=
	 identifier
	| _module_export_name 'as' identifier

import_attribute ::=
	 'with' object

statement ::=
	 export_statement
	| import_statement
	| debugger_statement
	| expression_statement
	| declaration
	| statement_block
	| if_statement
	| switch_statement
	| for_statement
	| for_in_statement
	| while_statement
	| do_statement
	| try_statement
	| with_statement
	| break_statement
	| continue_statement
	| return_statement
	| throw_statement
	| empty_statement
	| labeled_statement

expression_statement ::=
	 _expressions _semicolon

variable_declaration ::=
	 'var' variable_declarator ( ',' variable_declarator )* _semicolon

lexical_declaration ::=
	 ( 'let' | 'const' ) variable_declarator ( ',' variable_declarator )* _semicolon

variable_declarator ::=
	 ( identifier | _destructuring_pattern ) _initializer?

statement_block ::=
	 '{' statement* '}' _automatic_semicolon?

else_clause ::=
	 'else' statement

if_statement ::=
	 'if' parenthesized_expression statement else_clause?

switch_statement ::=
	 'switch' parenthesized_expression switch_body

for_statement ::=
	 'for' '(' ( lexical_declaration | variable_declaration | expression_statement | empty_statement ) ( expression_statement | empty_statement ) _expressions? ')' statement

for_in_statement ::=
	 'for' 'await'? _for_header statement

_for_header ::=
	 '(' ( ( _lhs_expression | parenthesized_expression ) | 'var' ( identifier | _destructuring_pattern ) _initializer? | ( 'let' | 'const' ) ( identifier | _destructuring_pattern ) ) ( 'in' | 'of' ) _expressions ')'

while_statement ::=
	 'while' parenthesized_expression statement

do_statement ::=
	 'do' statement 'while' parenthesized_expression _semicolon?

try_statement ::=
	 'try' statement_block catch_clause? finally_clause?

with_statement ::=
	 'with' parenthesized_expression statement

break_statement ::=
	 'break' identifier? _semicolon

continue_statement ::=
	 'continue' identifier? _semicolon

debugger_statement ::=
	 'debugger' _semicolon

return_statement ::=
	 'return' _expressions? _semicolon

throw_statement ::=
	 'throw' _expressions _semicolon

empty_statement ::=
	 ';'

labeled_statement ::=
	 ( identifier | _reserved_identifier ) ':' statement

switch_body ::=
	 '{' ( switch_case | switch_default )* '}'

switch_case ::=
	 'case' _expressions ':' statement*

switch_default ::=
	 'default' ':' statement*

catch_clause ::=
	 'catch' ( '(' ( identifier | _destructuring_pattern ) ')' )? statement_block

finally_clause ::=
	 'finally' statement_block

parenthesized_expression ::=
	 '(' _expressions ')'

_expressions ::=
	 expression
	| sequence_expression

expression ::=
	 primary_expression
	| glimmer_template
	| _jsx_element
	| assignment_expression
	| augmented_assignment_expression
	| await_expression
	| unary_expression
	| binary_expression
	| ternary_expression
	| update_expression
	| new_expression
	| yield_expression

primary_expression ::=
	 subscript_expression
	| member_expression
	| parenthesized_expression
	| _identifier
	| _reserved_identifier
	| this
	| super
	| number
	| string
	| template_string
	| regex
	| true
	| false
	| null
	| object
	| array
	| function_expression
	| arrow_function
	| generator_function
	| class
	| meta_property
	| call_expression

yield_expression ::=
	 'yield' ( '*' expression | expression )

object ::=
	 '{' ( ( pair | spread_element | method_definition | ( identifier | _reserved_identifier ) )? ( ',' ( pair | spread_element | method_definition | ( identifier | _reserved_identifier ) )? )* )? '}'

object_pattern ::=
	 '{' ( ( pair_pattern | rest_pattern | object_assignment_pattern | ( identifier | _reserved_identifier ) )? ( ',' ( pair_pattern | rest_pattern | object_assignment_pattern | ( identifier | _reserved_identifier ) )? )* )? '}'

assignment_pattern ::=
	 pattern '=' expression

object_assignment_pattern ::=
	 ( ( _reserved_identifier | identifier ) | _destructuring_pattern ) '=' expression

array ::=
	 '[' ( ( expression | spread_element )? ( ',' ( expression | spread_element )? )* )? ']'

array_pattern ::=
	 '[' ( ( pattern | assignment_pattern )? ( ',' ( pattern | assignment_pattern )? )* )? ']'

glimmer_template ::=
	 glimmer_opening_tag _glimmer_template_content* glimmer_closing_tag
	| glimmer_opening_tag glimmer_closing_tag

_glimmer_template_content ::=
	 '.{1,}'

glimmer_opening_tag ::=
	 '<template>'

glimmer_closing_tag ::=
	 '</template>'

_jsx_element ::=
	 jsx_element
	| jsx_self_closing_element

jsx_element ::=
	 jsx_opening_element _jsx_child* jsx_closing_element

jsx_text ::=
	 [^{}<>#x0A& ]([^{}<>#x0A&]*[^{}<>#x0A& ])?
	| '\/\/'[^#x0A]*

html_character_reference ::=
	 '&'('#'([xX][0-9a-fA-F]'{1,6}'|[0-9]'{1,5}')|[A-Za-z]'{1,30}')';'

jsx_expression ::=
	 '{' ( expression | sequence_expression | spread_element )? '}'

_jsx_child ::=
	 jsx_text
	| html_character_reference
	| _jsx_element
	| jsx_expression

jsx_opening_element ::=
	 '<' ( _jsx_element_name _jsx_attribute* )? '>'

jsx_identifier ::=
	 [a-zA-Z_$][a-zA-Z0-9_$]*'-'[a-zA-Z0-9_$#x2D-]*

_jsx_identifier ::=
	 jsx_identifier
	| identifier

nested_identifier ::=
	 ( identifier | nested_identifier ) '.' identifier

jsx_namespace_name ::=
	 _jsx_identifier ':' _jsx_identifier

_jsx_element_name ::=
	 _jsx_identifier
	| nested_identifier
	| jsx_namespace_name

jsx_closing_element ::=
	 '</' _jsx_element_name? '>'

jsx_self_closing_element ::=
	 '<' _jsx_element_name _jsx_attribute* '/>'

_jsx_attribute ::=
	 jsx_attribute
	| jsx_expression

_jsx_attribute_name ::=
	 _jsx_identifier
	| jsx_namespace_name

jsx_attribute ::=
	 _jsx_attribute_name ( '=' _jsx_attribute_value )?

_jsx_string ::=
	 '"'  ( unescaped_double_jsx_string_fragment | html_character_reference )* '"' 
	| "'"  ( unescaped_single_jsx_string_fragment | html_character_reference )* "'" 

unescaped_double_jsx_string_fragment ::=
	 [^"&]+

unescaped_single_jsx_string_fragment ::=
	 [^'&]+

_jsx_attribute_value ::=
	 _jsx_string
	| jsx_expression
	| _jsx_element

class ::=
	 decorator* 'class' identifier? class_heritage? class_body

class_declaration ::=
	 decorator* 'class' identifier class_heritage? class_body _automatic_semicolon?

class_heritage ::=
	 'extends' expression

function_expression ::=
	 'async'? 'function' identifier? _call_signature statement_block

function_declaration ::=
	 'async'? 'function' identifier _call_signature statement_block _automatic_semicolon?

generator_function ::=
	 'async'? 'function' '*' identifier? _call_signature statement_block

generator_function_declaration ::=
	 'async'? 'function' '*' identifier _call_signature statement_block _automatic_semicolon?

arrow_function ::=
	 'async'? ( ( _reserved_identifier | identifier ) | _call_signature ) '=>' ( expression | statement_block )

_call_signature ::=
	 formal_parameters

_formal_parameter ::=
	 pattern
	| assignment_pattern

optional_chain ::=
	 '?.'

call_expression ::=
	 ( expression | import ) ( arguments | template_string )
	| primary_expression optional_chain arguments

new_expression ::=
	 'new' ( primary_expression | new_expression ) arguments?

await_expression ::=
	 'await' expression

member_expression ::=
	 ( expression | primary_expression | import ) ( '.' | optional_chain ) ( private_property_identifier | identifier )

subscript_expression ::=
	 ( expression | primary_expression ) optional_chain? '[' _expressions ']'

_lhs_expression ::=
	 member_expression
	| subscript_expression
	| _identifier
	| _reserved_identifier
	| _destructuring_pattern

assignment_expression ::=
	 ( parenthesized_expression | _lhs_expression ) '=' expression

_augmented_assignment_lhs ::=
	 member_expression
	| subscript_expression
	| _reserved_identifier
	| identifier
	| parenthesized_expression

augmented_assignment_expression ::=
	 _augmented_assignment_lhs ( '+=' | '-=' | '*=' | '/=' | '%=' | '^=' | '&=' | '|=' | '>>=' | '>>>=' | '<<=' | '**=' | '&&=' | '||=' | '??=' ) expression

_initializer ::=
	 '=' expression

_destructuring_pattern ::=
	 object_pattern
	| array_pattern

spread_element ::=
	 '...' expression

ternary_expression ::=
	 expression _ternary_qmark expression ':' expression

binary_expression ::=
	 expression '&&' expression
	| expression '||' expression
	| expression '>>' expression
	| expression '>>>' expression
	| expression '<<' expression
	| expression '&' expression
	| expression '^' expression
	| expression '|' expression
	| expression '+' expression
	| expression '-' expression
	| expression '*' expression
	| expression '/' expression
	| expression '%' expression
	| expression '**' expression
	| expression '<' expression
	| expression '<=' expression
	| expression '==' expression
	| expression '===' expression
	| expression '!=' expression
	| expression '!==' expression
	| expression '>=' expression
	| expression '>' expression
	| expression '??' expression
	| expression 'instanceof' expression
	| ( expression | private_property_identifier ) 'in' expression

unary_expression ::=
	 ( '!' | '~' | '-' | '+' | 'typeof' | 'void' | 'delete' ) expression

update_expression ::=
	 expression ( '++' | '--' ) | ( '++' | '--' ) expression

sequence_expression ::=
	 expression ( ',' expression )*

string ::=
	 '"'  ( unescaped_double_string_fragment | escape_sequence )* '"' 
	| "'"  ( unescaped_single_string_fragment | escape_sequence )* "'" 

unescaped_double_string_fragment ::=
	 [^"\#x0D#x0A]+

unescaped_single_string_fragment ::=
	 [^'\#x0D#x0A]+

escape_sequence ::=
	 ( '\\'  ( [^xu0-7] | [0-7]'{1,3}' | 'x'[0-9a-fA-F]'{2}' | 'u'[0-9a-fA-F]'{4}' | 'u{'[0-9a-fA-F]+'}' | [#x0D?][#x0A\u2028\u2029] ) )

comment ::=
	 ( '//' '.'* | '/*' [^*]*'\'*+([^/*][^*]*'\'*+)* '/' )

template_string ::=
	 '`' ( _template_chars | escape_sequence | template_substitution )* '`'

template_substitution ::=
	 '${' _expressions '}'

regex ::=
	 '/' regex_pattern '/' regex_flags?

regex_pattern ::=
	 ( '[' ( '\\'  '.' | [^#x5D#x0A\] )* ']' | '\\'  '.' | [^/\#x5B#x0A] )+

regex_flags ::=
	 [a-z]+

number ::=
	 ( ( '0x' | '0X' ) [0-9a-fA-F]('_'?[0-9a-fA-F])* | ( '0' | '0'? [1-9] ( '_'? [0-9]('_'?[0-9])* )? ) '.' [0-9]('_'?[0-9])*? ( ( 'e' | 'E' ) ( '-' | '+' )? [0-9]('_'?[0-9])* )? | '.' [0-9]('_'?[0-9])* ( ( 'e' | 'E' ) ( '-' | '+' )? [0-9]('_'?[0-9])* )? | ( '0' | '0'? [1-9] ( '_'? [0-9]('_'?[0-9])* )? ) ( 'e' | 'E' ) ( '-' | '+' )? [0-9]('_'?[0-9])* | [0-9]('_'?[0-9])* | ( '0b' | '0B' ) [0-1]('_'?[0-1])* | ( '0o' | '0O' ) [0-7]('_'?[0-7])* | ( ( '0x' | '0X' ) [0-9a-fA-F]('_'?[0-9a-fA-F])* | ( '0b' | '0B' ) [0-1]('_'?[0-1])* | ( '0o' | '0O' ) [0-7]('_'?[0-7])* | [0-9]('_'?[0-9])* ) 'n' )

_identifier ::=
	 undefined
	| identifier

identifier ::=
	 ( [^\x00-\x1F #x09#x0A#x0B#x0C#x0D\p{Zs}0-9:;`"'@#x23.,|^&<=>+#x2D-*/\%?!~()#x5B#x5D{}\uFEFF\u2060\u200B]|"\u"[0-9a-fA-F]"{4}"|"\u\{"[0-9a-fA-F]+"\}" [^\x00-\x1F #x09#x0A#x0B#x0C#x0D\p{Zs}:;`"'@#x23.,|^&<=>+#x2D-*/\%?!~()#x5B#x5D{}\uFEFF\u2060\u200B]|"\u"[0-9a-fA-F]"{4}"|"\u\{"[0-9a-fA-F]+"\}"* )

private_property_identifier ::=
	 ( '#' [^\x00-\x1F #x09#x0A#x0B#x0C#x0D\p{Zs}0-9:;`"'@#x23.,|^&<=>+#x2D-*/\%?!~()#x5B#x5D{}\uFEFF\u2060\u200B]|"\u"[0-9a-fA-F]"{4}"|"\u\{"[0-9a-fA-F]+"\}" [^\x00-\x1F #x09#x0A#x0B#x0C#x0D\p{Zs}:;`"'@#x23.,|^&<=>+#x2D-*/\%?!~()#x5B#x5D{}\uFEFF\u2060\u200B]|"\u"[0-9a-fA-F]"{4}"|"\u\{"[0-9a-fA-F]+"\}"* )

meta_property ::=
	 'new' '.' 'target'

this ::=
	 'this'

super ::=
	 'super'

true ::=
	 'true'

false ::=
	 'false'

null ::=
	 'null'

undefined ::=
	 'undefined'

arguments ::=
	 '(' ( ( expression | spread_element )? ( ',' ( expression | spread_element )? )* )? ')'

decorator ::=
	 '@' ( identifier | decorator_member_expression | decorator_call_expression )

decorator_member_expression ::=
	 ( identifier | decorator_member_expression ) '.' identifier

decorator_call_expression ::=
	 ( identifier | decorator_member_expression ) arguments

class_body ::=
	 '{' ( method_definition ';'? | field_definition _semicolon | class_static_block | glimmer_template | ';' )* '}'

field_definition ::=
	 decorator* 'static'? _property_name _initializer?

formal_parameters ::=
	 '(' ( _formal_parameter ( ',' _formal_parameter )* ','? )? ')'

class_static_block ::=
	 'static' statement_block

pattern ::=
	 _lhs_expression | rest_pattern

rest_pattern ::=
	 '...' _lhs_expression

method_definition ::=
	 decorator* ( 'static' | ( 'static' [ #x09#x0A#x0B#x0C#x0D]+ 'get' [ #x09#x0A#x0B#x0C#x0D]*'#x0A' ) )? 'async'? ( 'get' | 'set' | '*' )? _property_name formal_parameters statement_block

pair ::=
	 _property_name ':' expression

pair_pattern ::=
	 _property_name ':' ( pattern | assignment_pattern )

_property_name ::=
	 ( identifier | _reserved_identifier )
	| private_property_identifier
	| string
	| number
	| computed_property_name

computed_property_name ::=
	 '[' expression ']'

_reserved_identifier ::=
	 'get'
	| 'set'
	| 'async'
	| 'static'
	| 'export'
	| 'let'

_semicolon ::=
	 _automatic_semicolon
	| ';'

