//
// From tree-sitter-r/src/grammar.json
//
//
// EBNF to generate railroad diagram at 
//      (IPV6) https://www.bottlecaps.de/rr/ui
//      (IPV4) https://rr.red-dove.com/ui
//

program ::=
	 ( _expression ( '\n'  | ';' )? )*

_definition ::=
	 function_definition
	| lambda_function

function_definition ::=
	 'function' formal_parameters _expression

lambda_function ::=
	 '\\'  formal_parameters _expression

if ::=
	 'if' '(' _expression ')' _expression ( 'else' _expression )?

while ::=
	 'while' '(' _expression ')' _expression

repeat ::=
	 'repeat' _expression

for ::=
	 'for' '(' identifier 'in' _expression ')' _expression

switch ::=
	 'switch' '(' _expression ',' arguments ')'

formal_parameters ::=
	 '(' ( _formal_parameter ( ',' _formal_parameter )* ','? )? ')'

default_parameter ::=
	 identifier '=' _expression

_formal_parameter ::=
	 identifier
	| default_parameter
	| dots

block ::=
	 '{' _expression* '}'

arguments ::=
	 ( _argument | ',' )+

default_argument ::=
	 ( identifier | string | dots ) '=' _expression?

_argument ::=
	 _expression | default_argument

call ::=
	 _expression '(' arguments? ')'

_assignment ::=
	 equals_assignment
	| left_assignment
	| left_assignment2
	| right_assignment
	| super_assignment
	| super_right_assignment

left_assignment ::=
	 _expression '<-' _expression

left_assignment2 ::=
	 _expression ':=' _expression

equals_assignment ::=
	 _expression '=' _expression

super_assignment ::=
	 _expression '<<-' _expression

super_right_assignment ::=
	 _expression '->>' _expression

right_assignment ::=
	 _expression '->' _expression

brace_list ::=
	 '{' ( _expression ( '\n'  | ';' )? )* '}'

paren_list ::=
	 '(' _expression* ')'

subset ::=
	 _expression '[' arguments? ']'

subset2 ::=
	 _expression '[[' arguments? ']]'

dollar ::=
	 _expression '$' ( identifier | string )

slot ::=
	 _expression '@' identifier

namespace_get ::=
	 identifier '::' identifier

namespace_get_internal ::=
	 identifier ':::' identifier

help ::=
	 _expression '?' _expression

dots ::=
	 '...'

placeholder ::=
	 '_'

pipe_placeholder_argument ::=
	 identifier '=' placeholder

_pipe_rhs_argument ::=
	 _expression | default_argument | pipe_placeholder_argument

pipe_rhs_arguments ::=
	 ( _pipe_rhs_argument | ',' )+

pipe_rhs ::=
	 _expression '(' pipe_rhs_arguments? ')'

pipe ::=
	 _expression '|>' pipe_rhs

unary ::=
	 ( '-' | '+' ) _expression
	| '!' _expression
	| '~' _expression
	| '?' _expression

binary ::=
	 _expression ( '+' | '-' ) _expression
	| _expression ( '*' | '/' ) _expression
	| _expression '^' _expression
	| _expression ( '<' | '>' | '<=' | '>=' | '==' | '!=' ) _expression
	| _expression ( '||' | '|' ) _expression
	| _expression ( '&&' | '&' ) _expression
	| _expression special _expression
	| _expression ':' _expression
	| _expression '~' _expression

break ::=
	 'break'

next ::=
	 'next'

true ::=
	 'TRUE'

false ::=
	 'FALSE'

null ::=
	 'NULL'

inf ::=
	 'Inf'

nan ::=
	 'NaN'

na ::=
	 'NA'
	| 'NA_character_'
	| 'NA_complex_'
	| 'NA_integer_'
	| 'NA_real_'

_expression ::=
	 identifier | integer | float | complex | string | call | function_definition | lambda_function | _assignment | brace_list | paren_list | binary | unary | pipe | subset | subset2 | dollar | slot | namespace_get | namespace_get_internal | help | if | for | while | repeat | switch | break | next | true | false | null | inf | nan | na | dots

identifier ::=
	 [.\p{XID_Start}][._\p{XID_Continue}]*
	| '`' ( [^`\#x0A]+|'\#x0D'?'#x0A' | escape_sequence )* '`'

integer ::=
	 ( ( '0x' | '0X' ) [A-Fa-f0-9]+ | [0-9]+ ) 'L'

float ::=
	 [0-9]+ '.'? [0-9]+? ( [eE][\+-]? [0-9]+ )? | [0-9]+? '.' [0-9]+ ( [eE][\+-]? [0-9]+ )? | [0-9]+ [eE][\+-]? [0-9]+ | ( '0x' | '0X' ) [A-Fa-f0-9]+

complex ::=
	 float 'i'

comment ::=
	 '#' '.'*

string ::=
	 _raw_string_literal
	| '"'  ( [^"\#x0A]+|'\#x0D'?'#x0A' | escape_sequence )* '"' 
	| "'"  ( [^'\#x0A]+|"\#x0D"?"#x0A" | escape_sequence )* "'" 

special ::=
	 '%' ( [^%\#x0A]+|'\#x0D'?'#x0A' | escape_sequence )* '%'

escape_sequence ::=
	 ( '\\'  ( [^xu0-7] | [0-7]'{1,3}' | 'x'[0-9a-fA-F]'{2}' | 'u'[0-9a-fA-F]'{4}' | 'u{'[0-9a-fA-F]+'}' ) )

