//
// From tree-sitter-julia/src/grammar.json
//
//
// EBNF to generate railroad diagram at 
//      (IPV6) https://www.bottlecaps.de/rr/ui
//      (IPV4) https://rr.red-dove.com/ui
//

source_file ::=
	 _block

_block ::=
	 ( _expression | assignment | bare_tuple | short_function_definition ) ( _terminator ( _expression | assignment | bare_tuple | short_function_definition ) )* _terminator?

_expression ::=
	 _definition
	| _statement
	| _number
	| _primary_expression
	| _operation
	| macrocall_expression
	| operator
	| ':'
	| 'begin'

assignment ::=
	 ( _quotable | field_expression | index_expression | parametrized_type_expression | interpolation_expression | quote_expression | typed_expression | operator | binary_expression | unary_expression | bare_tuple ) '=' ( _expression | assignment | bare_tuple )

bare_tuple ::=
	 _expression ',' _expression+

_definition ::=
	 module_definition
	| abstract_definition
	| primitive_definition
	| struct_definition
	| function_definition
	| macro_definition

module_definition ::=
	 ( 'module' | 'baremodule' ) ( identifier | interpolation_expression ) _terminator? _block? 'end'

abstract_definition ::=
	 ( 'abstract' [ #x09#x0A#x0B#x0C#x0D]+ 'type' ) ( identifier | interpolation_expression ) ( _immediate_brace curly_expression )? type_clause? 'end'

primitive_definition ::=
	 ( 'primitive' [ #x09#x0A#x0B#x0C#x0D]+ 'type' ) ( identifier | interpolation_expression ) ( _immediate_brace curly_expression )? type_clause? integer_literal 'end'

struct_definition ::=
	 'mutable'? 'struct' ( identifier | interpolation_expression ) ( _immediate_brace curly_expression )? type_clause? _terminator? _block? 'end'

type_clause ::=
	 '<:' _primary_expression

function_definition ::=
	 'function' ( ( _function_signature | parameter_list ( '::' _primary_expression )? where_clause? ) _terminator? _block? | ( identifier | operator ) ) 'end'

short_function_definition ::=
	 _function_signature '=' ( _expression | assignment | bare_tuple )

_function_signature ::=
	 ( identifier | operator | field_expression | '(' ( identifier | operator ) ')' | '(' typed_parameter ')' | interpolation_expression ) ( _immediate_brace curly_expression )? _immediate_paren parameter_list ( '::' _primary_expression )? where_clause?

where_clause ::=
	 'where' _expression

macro_definition ::=
	 'macro' ( identifier | operator | interpolation_expression ) _immediate_paren parameter_list _terminator? _block? 'end'

parameter_list ::=
	 '(' ( ( identifier | slurp_parameter | optional_parameter | typed_parameter | tuple_expression | interpolation_expression | _closed_macrocall_expression | call_expression ) ( ',' ( identifier | slurp_parameter | optional_parameter | typed_parameter | tuple_expression | interpolation_expression | _closed_macrocall_expression | call_expression ) )* )? ','? keyword_parameters? ')'

keyword_parameters ::=
	 ';' ( identifier | slurp_parameter | optional_parameter | typed_parameter | interpolation_expression | _closed_macrocall_expression ) ( ',' ( identifier | slurp_parameter | optional_parameter | typed_parameter | interpolation_expression | _closed_macrocall_expression ) )* ','?

optional_parameter ::=
	 ( identifier | typed_parameter | tuple_expression ) '=' _expression

slurp_parameter ::=
	 ( identifier | typed_parameter ) '...'

typed_parameter ::=
	 ( identifier | tuple_expression | interpolation_expression )? '::' _primary_expression where_clause?

_statement ::=
	 compound_statement
	| quote_statement
	| let_statement
	| if_statement
	| try_statement
	| for_statement
	| while_statement
	| break_statement
	| continue_statement
	| return_statement
	| const_statement
	| global_statement
	| local_statement
	| export_statement
	| import_statement

compound_statement ::=
	 'begin' _terminator? _block? 'end'

quote_statement ::=
	 'quote' _terminator? _block? 'end'

let_statement ::=
	 'let' ( ( identifier | named_field ) ( ',' ( identifier | named_field ) )* )? _terminator _block? 'end'

if_statement ::=
	 'if' _expression _terminator? _block? elseif_clause* else_clause? 'end'

elseif_clause ::=
	 'elseif' _expression _terminator? _block?

else_clause ::=
	 'else' _terminator? _block?

try_statement ::=
	 'try' _terminator? _block? ( catch_clause else_clause? finally_clause? | finally_clause catch_clause? ) 'end'

catch_clause ::=
	 'catch' identifier? _terminator? _block?

finally_clause ::=
	 'finally' _terminator? _block?

for_statement ::=
	 'for' for_binding ( ',' for_binding )* _terminator? _block? 'end'

while_statement ::=
	 'while' _expression _terminator? _block? 'end'

break_statement ::=
	 'break'

continue_statement ::=
	 'continue'

return_statement ::=
	 'return' ( _expression | assignment | bare_tuple )?

const_statement ::=
	 'const' ( assignment | identifier | typed_expression )

global_statement ::=
	 'global' ( assignment | bare_tuple | identifier | typed_expression | function_definition | short_function_definition )

local_statement ::=
	 'local' ( assignment | bare_tuple | identifier | typed_expression | function_definition | short_function_definition )

_exportable ::=
	 identifier
	| macro_identifier
	| operator
	| interpolation_expression
	| '(' ( identifier | operator ) ')'

export_statement ::=
	 'export' _exportable ( ',' _exportable )*

relative_qualifier ::=
	 '.'+ ( identifier | scoped_identifier )

_importable ::=
	 _exportable
	| scoped_identifier
	| relative_qualifier

import_alias ::=
	 _importable 'as' identifier

_import_list ::=
	 ( _importable | import_alias ) ( ',' ( _importable | import_alias ) )*

selected_import ::=
	 _importable ':' _import_list

import_statement ::=
	 ( 'import' | 'using' ) ( _import_list | selected_import )

_quotable ::=
	 _array
	| identifier
	| curly_expression
	| parenthesized_expression
	| tuple_expression
	| _string

_array ::=
	 comprehension_expression
	| matrix_expression
	| vector_expression

comprehension_expression ::=
	 '[' ( _expression | assignment ) _terminator? _comprehension_clause ']'

_comprehension_clause ::=
	 for_clause '\n' ? ( ( for_clause | if_clause ) ( '\n' ? ( for_clause | if_clause ) )* )? '\n' ?

if_clause ::=
	 'if' _expression

for_clause ::=
	 'for' for_binding ( ',' for_binding )*

for_binding ::=
	 ( identifier | tuple_expression | typed_parameter | interpolation_expression ) ( 'in' | '=' | '∈' ) _expression

matrix_expression ::=
	 '[' ( matrix_row _terminator '\n' ? | matrix_row ( _terminator '\n' ? matrix_row )* ) _terminator? '\n' ? ']'

matrix_row ::=
	 _expression | named_field+

vector_expression ::=
	 '[' ( ( _expression | named_field ) ( ',' ( _expression | named_field ) )* )? ','? ']'

parenthesized_expression ::=
	 '(' ( _expression | assignment | short_function_definition ) ( ';' ( _expression | assignment | short_function_definition ) )* _comprehension_clause? ';'? ')'

tuple_expression ::=
	 '(' ( ( _expression | named_field ) ',' | ( _expression | named_field ) ( ',' ( _expression | named_field ) )+ ( _comprehension_clause | ',' )? | ';' | ';' ( _expression | named_field ) ( ',' ( _expression | named_field ) )* ','? )? ')'

curly_expression ::=
	 '{' ( ( _expression | named_field ) ( ',' ( _expression | named_field ) )* )? ','? '}'

_primary_expression ::=
	 _quotable
	| adjoint_expression
	| broadcast_call_expression
	| call_expression
	| _closed_macrocall_expression
	| parametrized_type_expression
	| field_expression
	| index_expression
	| interpolation_expression
	| quote_expression

adjoint_expression ::=
	 _primary_expression "'" 

field_expression ::=
	 _primary_expression '.' ( identifier | interpolation_expression | quote_expression | _string )

index_expression ::=
	 _primary_expression _immediate_bracket _array

parametrized_type_expression ::=
	 _primary_expression _immediate_brace curly_expression

call_expression ::=
	 ( _primary_expression | operator ) _immediate_paren argument_list do_clause?

broadcast_call_expression ::=
	 _primary_expression '.' _immediate_paren argument_list do_clause?

_closed_macrocall_expression ::=
	 ( _primary_expression '.' )? macro_identifier ( _immediate_brace curly_expression | _immediate_bracket _array | _immediate_paren argument_list do_clause? )

macrocall_expression ::=
	 ( _primary_expression '.' )? macro_identifier macro_argument_list?

macro_argument_list ::=
	 _expression | assignment | bare_tuple | short_function_definition+

argument_list ::=
	 '(' ( ( _expression | named_field ) ( ',' ( _expression | named_field ) )* ( ',' ( _expression _comprehension_clause )? )? | _expression _comprehension_clause )? ( ';' ( ( _expression | named_field ) ( ',' ( _expression | named_field ) )* )? )? ','? ')'

do_clause ::=
	 'do' _do_parameter_list _block? 'end'

_do_parameter_list ::=
	 ( ( identifier | slurp_parameter | typed_parameter | tuple_expression | '(' ( identifier | slurp_parameter | typed_parameter ) ')' ) ( ',' ( identifier | slurp_parameter | typed_parameter | tuple_expression | '(' ( identifier | slurp_parameter | typed_parameter ) ')' ) )* )? _terminator

named_field ::=
	 ( identifier | interpolation_expression ) '=' ( _expression | named_field )

interpolation_expression ::=
	 '$' ( _number | _quotable )

quote_expression ::=
	 ':' ( _number | _string | identifier | operator | _immediate_brace curly_expression | _immediate_bracket _array | _immediate_paren ( parenthesized_expression | tuple_expression | '(' ( '::' | ':=' | '.=' | '=' | _assignment_operator | _lazy_or_operator | _lazy_and_operator | _syntactic_operator ) ')' ) | ( _assignment_operator | _lazy_or_operator | _lazy_and_operator | _syntactic_operator ) | ( 'baremodule' | 'module' | 'abstract' | 'primitive' | 'mutable' | 'struct' | 'quote' | 'let' | 'if' | 'else' | 'elseif' | 'try' | 'catch' | 'finally' | 'for' | 'while' | 'break' | 'continue' | 'using' | 'import' | 'const' | 'global' | 'local' | 'end' ) )

_operation ::=
	 unary_expression
	| binary_expression
	| range_expression
	| splat_expression
	| ternary_expression
	| typed_expression
	| function_expression
	| juxtaposition_expression
	| compound_assignment_expression
	| where_expression

binary_expression ::=
	 _expression _pair_operator _expression
	| _expression _arrow_operator _expression
	| _expression _lazy_or_operator _expression
	| _expression _lazy_and_operator _expression
	| _expression ( 'in' | 'isa' | _comparison_operator | _type_order_operator ) _expression
	| _expression _pipe_left_operator _expression
	| _expression _pipe_right_operator _expression
	| _expression _ellipsis_operator _expression
	| _expression ( _unary_plus_operator | _plus_operator ) _expression
	| _expression _times_operator _expression
	| _expression _rational_operator _expression
	| _expression _bitshift_operator _expression
	| _expression _power_operator _expression

unary_expression ::=
	 ( _tilde_operator | _type_order_operator | _unary_operator | _unary_plus_operator ) _expression

range_expression ::=
	 _expression ':' _expression

splat_expression ::=
	 _expression '...'

ternary_expression ::=
	 _expression '?' ( _expression | assignment ) ':' ( _expression | assignment )

typed_expression ::=
	 _expression '::' ( _primary_expression )

function_expression ::=
	 ( identifier | parameter_list | typed_expression ) '->' ( _expression | assignment )

juxtaposition_expression ::=
	 ( integer_literal | float_literal | adjoint_expression ) _primary_expression

compound_assignment_expression ::=
	 _primary_expression ( _assignment_operator | _tilde_operator ) _expression

where_expression ::=
	 _expression 'where' _expression

macro_identifier ::=
	 '@' ( identifier | scoped_identifier | operator | _syntactic_operator )

scoped_identifier ::=
	 ( identifier | scoped_identifier ) '.' ( identifier | interpolation_expression | quote_expression )

_word_identifier ::=
	 [_\p{XID_Start}°∀-∇∎-∑∫-∳\p{Emoji}&&[^0-9#x23*]][^"'` #x09#x0A#x0B#x0C#x0D.#x2D-#x5B#x5D#x23$,:;@~(){}+==*=/=//=\=^=%=<<=>>=>>>=|=&=−=÷=⊻=≔⩴≕<><>←→↔↚↛↞↠↢↣↦↤↮⇎⇍⇏⇐⇒⇔⇴⇶⇷⇸⇹⇺⇻⇼⇽⇾⇿⟵⟶⟷⟹⟺⟻⟼⟽⟾⟿⤀⤁⤂⤃⤄⤅⤆⤇⤌⤍⤎⤏⤐⤑⤔⤕⤖⤗⤘⤝⤞⤟⤠⥄⥅⥆⥇⥈⥊⥋⥎⥐⥒⥓⥖⥗⥚⥛⥞⥟⥢⥤⥦⥧⥨⥩⥪⥫⥬⥭⥰⧴⬱⬰⬲⬳⬴⬵⬶⬷⬸⬹⬺⬻⬼⬽⬾⬿⭀⭁⭂⭃⥷⭄⥺⭇⭈⭉⭊⭋⭌￩￫⇜⇝↜↝↩↪↫↬↼↽⇀⇁⇄⇆⇇⇉⇋⇌⇚⇛⇠⇢↷↶↺↻><>=<=========≥≤≡≠≢∈∉∋∌⊆⊈⊂⊄⊊∝∊∍∥∦∷∺∻∽∾≁≃≂≄≅≆≇≈≉≊≋≌≍≎≐≑≒≓≖≗≘≙≚≛≜≝≞≟≣≦≧≨≩≪≫≬≭≮≯≰≱≲≳≴≵≶≷≸≹≺≻≼≽≾≿⊀⊁⊃⊅⊇⊉⊋⊏⊐⊑⊒⊜⊩⊬⊮⊰⊱⊲⊳⊴⊵⊶⊷⋍⋐⋑⋕⋖⋗⋘⋙⋚⋛⋜⋝⋞⋟⋠⋡⋢⋣⋤⋥⋦⋧⋨⋩⋪⋫⋬⋭⋲⋳⋴⋵⋶⋷⋸⋹⋺⋻⋼⋽⋾⋿⟈⟉⟒⦷⧀⧁⧡⧣⧤⧥⩦⩧⩪⩫⩬⩭⩮⩯⩰⩱⩲⩳⩵⩶⩷⩸⩹⩺⩻⩼⩽⩾⩿⪀⪁⪂⪃⪄⪅⪆⪇⪈⪉⪊⪋⪌⪍⪎⪏⪐⪑⪒⪓⪔⪕⪖⪗⪘⪙⪚⪛⪜⪝⪞⪟⪠⪡⪢⪣⪤⪥⪦⪧⪨⪩⪪⪫⪬⪭⪮⪯⪰⪱⪲⪳⪴⪵⪶⪷⪸⪹⪺⪻⪼⪽⪾⪿⫀⫁⫂⫃⫄⫅⫆⫇⫈⫉⫊⫋⫌⫍⫎⫏⫐⫑⫒⫓⫔⫕⫖⫗⫘⫙⫷⫸⫹⫺⊢⊣⟂⫪⫫…⁝⋮⋱⋰⋯++|−¦⊕⊖⊞⊟∪∨⊔±∓∔∸≏⊎⊻⊽⋎⋓⟇⧺⧻⨈⨢⨣⨤⨥⨦⨧⨨⨩⨪⨫⨬⨭⨮⨹⨺⩁⩂⩅⩊⩌⩏⩐⩒⩔⩖⩗⩛⩝⩡⩢⩣*/%&\⌿÷··⋅∘×∩∧⊗⊘⊙⊚⊛⊠⊡⊓∗∙∤⅋≀⊼⋄⋆⋇⋉⋊⋋⋌⋏⋒⟑⦸⦼⦾⦿⧶⧷⨇⨰⨱⨲⨳⨴⨵⨶⨷⨸⨻⨼⨽⩀⩃⩄⩋⩍⩎⩑⩓⩕⩘⩚⩜⩞⩟⩠⫛⊍▷⨝⟕⟖⟗⨟<<>>>>>^↑↓⇵⟰⟱⤈⤉⤊⤋⤒⤓⥉⥌⥍⥏⥑⥔⥕⥘⥙⥜⥝⥠⥡⥣⥥⥮⥯￪￬¬√∛∜+±∓]*

identifier ::=
	 _word_identifier

_number ::=
	 boolean_literal
	| integer_literal
	| float_literal

boolean_literal ::=
	 'true'
	| 'false'

integer_literal ::=
	 ( '0b' [01]|([01][01_]*[01]) )
	| ( '0o' [0-7]|([0-7][0-7_]*[0-7]) )
	| ( '0x' [0-9a-fA-F]|([0-9a-fA-F][0-9a-fA-F_]*[0-9a-fA-F]) )
	| [0-9]|([0-9][0-9_]*[0-9])

float_literal ::=
	 ( '.' [0-9]|([0-9][0-9_]*[0-9]) [eEf][+-]?[0-9]+? )
	| [0-9]|([0-9][0-9_]*[0-9]) ( '.' [0-9]|([0-9][0-9_]*[0-9])? [eEf][+-]?[0-9]+? )
	| ( [0-9]|([0-9][0-9_]*[0-9]) [eEf][+-]?[0-9]+ )
	| ( ( '0x' [0-9a-fA-F]|([0-9a-fA-F][0-9a-fA-F_]*[0-9a-fA-F]) '.'? [0-9a-fA-F]|([0-9a-fA-F][0-9a-fA-F_]*[0-9a-fA-F])? | '0x.' [0-9a-fA-F]|([0-9a-fA-F][0-9a-fA-F_]*[0-9a-fA-F]) ) 'p'[+-]?[0-9]+ )

_string ::=
	 character_literal
	| string_literal
	| command_literal
	| prefixed_string_literal
	| prefixed_command_literal

escape_sequence ::=
	 ( '\\'  ( [^uUx0-7] | [uU][0-9a-fA-F]'{1,6}' | [0-7]'{1,3}' | 'x'[0-9a-fA-F]'{2}' ) )

character_literal ::=
	 ( "'"  ( [^'\] | ( '\\'  ( [^uUx0-7] | [uU][0-9a-fA-F]'{1,6}' | [0-7]'{1,3}' | 'x'[0-9a-fA-F]'{2}' ) ) ) "'"  )

string_literal ::=
	 _string_start ( _string_content | string_interpolation | escape_sequence )* _string_end

command_literal ::=
	 _command_start ( _string_content | string_interpolation | escape_sequence )* _command_end

prefixed_string_literal ::=
	 identifier _immediate_string_start ( _string_content_no_interp | escape_sequence )* _string_end identifier?

prefixed_command_literal ::=
	 identifier _immediate_command_start ( _string_content_no_interp | escape_sequence )* _command_end identifier?

string_interpolation ::=
	 '$' ( identifier | _immediate_paren '(' ( _expression | named_field ) ')' )

operator ::=
	 _pair_operator
	| _arrow_operator
	| _comparison_operator
	| _pipe_left_operator
	| _pipe_right_operator
	| _ellipsis_operator
	| _plus_operator
	| _times_operator
	| _rational_operator
	| _bitshift_operator
	| _power_operator
	| _tilde_operator
	| _type_order_operator
	| _unary_operator
	| _unary_plus_operator

_assignment_operator ::=
	 ( ':=' | '$=' | '.=' | '.'? ( '+=' | '-=' | '*=' | '/=' | '//=' | '\=' | '^=' | '%=' | '<<=' | '>>=' | '>>>=' | '|=' | '&=' | '−=' | '÷=' | '⊻=' | '≔' | '⩴' | '≕' ) )

_pair_operator ::=
	 ( '.'? ( '=>' ) )

_arrow_operator ::=
	 ( '.'? ( '<--' | '-->' | '<-->' | '←' | '→' | '↔' | '↚' | '↛' | '↞' | '↠' | '↢' | '↣' | '↦' | '↤' | '↮' | '⇎' | '⇍' | '⇏' | '⇐' | '⇒' | '⇔' | '⇴' | '⇶' | '⇷' | '⇸' | '⇹' | '⇺' | '⇻' | '⇼' | '⇽' | '⇾' | '⇿' | '⟵' | '⟶' | '⟷' | '⟹' | '⟺' | '⟻' | '⟼' | '⟽' | '⟾' | '⟿' | '⤀' | '⤁' | '⤂' | '⤃' | '⤄' | '⤅' | '⤆' | '⤇' | '⤌' | '⤍' | '⤎' | '⤏' | '⤐' | '⤑' | '⤔' | '⤕' | '⤖' | '⤗' | '⤘' | '⤝' | '⤞' | '⤟' | '⤠' | '⥄' | '⥅' | '⥆' | '⥇' | '⥈' | '⥊' | '⥋' | '⥎' | '⥐' | '⥒' | '⥓' | '⥖' | '⥗' | '⥚' | '⥛' | '⥞' | '⥟' | '⥢' | '⥤' | '⥦' | '⥧' | '⥨' | '⥩' | '⥪' | '⥫' | '⥬' | '⥭' | '⥰' | '⧴' | '⬱' | '⬰' | '⬲' | '⬳' | '⬴' | '⬵' | '⬶' | '⬷' | '⬸' | '⬹' | '⬺' | '⬻' | '⬼' | '⬽' | '⬾' | '⬿' | '⭀' | '⭁' | '⭂' | '⭃' | '⥷' | '⭄' | '⥺' | '⭇' | '⭈' | '⭉' | '⭊' | '⭋' | '⭌' | '￩' | '￫' | '⇜' | '⇝' | '↜' | '↝' | '↩' | '↪' | '↫' | '↬' | '↼' | '↽' | '⇀' | '⇁' | '⇄' | '⇆' | '⇇' | '⇉' | '⇋' | '⇌' | '⇚' | '⇛' | '⇠' | '⇢' | '↷' | '↶' | '↺' | '↻' ) )

_lazy_or_operator ::=
	 ( '.'? ( '||' ) )

_lazy_and_operator ::=
	 ( '.'? ( '&&' ) )

_comparison_operator ::=
	 ( '.'? ( '>' | '<' | '>=' | '<=' | '==' | '===' | '!=' | '!==' | '≥' | '≤' | '≡' | '≠' | '≢' | '∈' | '∉' | '∋' | '∌' | '⊆' | '⊈' | '⊂' | '⊄' | '⊊' | '∝' | '∊' | '∍' | '∥' | '∦' | '∷' | '∺' | '∻' | '∽' | '∾' | '≁' | '≃' | '≂' | '≄' | '≅' | '≆' | '≇' | '≈' | '≉' | '≊' | '≋' | '≌' | '≍' | '≎' | '≐' | '≑' | '≒' | '≓' | '≖' | '≗' | '≘' | '≙' | '≚' | '≛' | '≜' | '≝' | '≞' | '≟' | '≣' | '≦' | '≧' | '≨' | '≩' | '≪' | '≫' | '≬' | '≭' | '≮' | '≯' | '≰' | '≱' | '≲' | '≳' | '≴' | '≵' | '≶' | '≷' | '≸' | '≹' | '≺' | '≻' | '≼' | '≽' | '≾' | '≿' | '⊀' | '⊁' | '⊃' | '⊅' | '⊇' | '⊉' | '⊋' | '⊏' | '⊐' | '⊑' | '⊒' | '⊜' | '⊩' | '⊬' | '⊮' | '⊰' | '⊱' | '⊲' | '⊳' | '⊴' | '⊵' | '⊶' | '⊷' | '⋍' | '⋐' | '⋑' | '⋕' | '⋖' | '⋗' | '⋘' | '⋙' | '⋚' | '⋛' | '⋜' | '⋝' | '⋞' | '⋟' | '⋠' | '⋡' | '⋢' | '⋣' | '⋤' | '⋥' | '⋦' | '⋧' | '⋨' | '⋩' | '⋪' | '⋫' | '⋬' | '⋭' | '⋲' | '⋳' | '⋴' | '⋵' | '⋶' | '⋷' | '⋸' | '⋹' | '⋺' | '⋻' | '⋼' | '⋽' | '⋾' | '⋿' | '⟈' | '⟉' | '⟒' | '⦷' | '⧀' | '⧁' | '⧡' | '⧣' | '⧤' | '⧥' | '⩦' | '⩧' | '⩪' | '⩫' | '⩬' | '⩭' | '⩮' | '⩯' | '⩰' | '⩱' | '⩲' | '⩳' | '⩵' | '⩶' | '⩷' | '⩸' | '⩹' | '⩺' | '⩻' | '⩼' | '⩽' | '⩾' | '⩿' | '⪀' | '⪁' | '⪂' | '⪃' | '⪄' | '⪅' | '⪆' | '⪇' | '⪈' | '⪉' | '⪊' | '⪋' | '⪌' | '⪍' | '⪎' | '⪏' | '⪐' | '⪑' | '⪒' | '⪓' | '⪔' | '⪕' | '⪖' | '⪗' | '⪘' | '⪙' | '⪚' | '⪛' | '⪜' | '⪝' | '⪞' | '⪟' | '⪠' | '⪡' | '⪢' | '⪣' | '⪤' | '⪥' | '⪦' | '⪧' | '⪨' | '⪩' | '⪪' | '⪫' | '⪬' | '⪭' | '⪮' | '⪯' | '⪰' | '⪱' | '⪲' | '⪳' | '⪴' | '⪵' | '⪶' | '⪷' | '⪸' | '⪹' | '⪺' | '⪻' | '⪼' | '⪽' | '⪾' | '⪿' | '⫀' | '⫁' | '⫂' | '⫃' | '⫄' | '⫅' | '⫆' | '⫇' | '⫈' | '⫉' | '⫊' | '⫋' | '⫌' | '⫍' | '⫎' | '⫏' | '⫐' | '⫑' | '⫒' | '⫓' | '⫔' | '⫕' | '⫖' | '⫗' | '⫘' | '⫙' | '⫷' | '⫸' | '⫹' | '⫺' | '⊢' | '⊣' | '⟂' | '⫪' | '⫫' ) )

_pipe_right_operator ::=
	 ( '.'? ( '|>' ) )

_pipe_left_operator ::=
	 ( '.'? ( '<|' ) )

_ellipsis_operator ::=
	 ( '..' | '.'? ( '…' | '⁝' | '⋮' | '⋱' | '⋰' | '⋯' ) )

_plus_operator ::=
	 ( '.'? ( '++' | '|' | '−' | '¦' | '⊕' | '⊖' | '⊞' | '⊟' | '∪' | '∨' | '⊔' | '±' | '∓' | '∔' | '∸' | '≏' | '⊎' | '⊻' | '⊽' | '⋎' | '⋓' | '⟇' | '⧺' | '⧻' | '⨈' | '⨢' | '⨣' | '⨤' | '⨥' | '⨦' | '⨧' | '⨨' | '⨩' | '⨪' | '⨫' | '⨬' | '⨭' | '⨮' | '⨹' | '⨺' | '⩁' | '⩂' | '⩅' | '⩊' | '⩌' | '⩏' | '⩐' | '⩒' | '⩔' | '⩖' | '⩗' | '⩛' | '⩝' | '⩡' | '⩢' | '⩣' ) )

_times_operator ::=
	 ( '.'? ( '*' | '/' | '%' | '&' | '\\'  | '⌿' | '÷' | '·' | '·' | '⋅' | '∘' | '×' | '∩' | '∧' | '⊗' | '⊘' | '⊙' | '⊚' | '⊛' | '⊠' | '⊡' | '⊓' | '∗' | '∙' | '∤' | '⅋' | '≀' | '⊼' | '⋄' | '⋆' | '⋇' | '⋉' | '⋊' | '⋋' | '⋌' | '⋏' | '⋒' | '⟑' | '⦸' | '⦼' | '⦾' | '⦿' | '⧶' | '⧷' | '⨇' | '⨰' | '⨱' | '⨲' | '⨳' | '⨴' | '⨵' | '⨶' | '⨷' | '⨸' | '⨻' | '⨼' | '⨽' | '⩀' | '⩃' | '⩄' | '⩋' | '⩍' | '⩎' | '⩑' | '⩓' | '⩕' | '⩘' | '⩚' | '⩜' | '⩞' | '⩟' | '⩠' | '⫛' | '⊍' | '▷' | '⨝' | '⟕' | '⟖' | '⟗' | '⨟' ) )

_rational_operator ::=
	 ( '.'? ( '//' ) )

_bitshift_operator ::=
	 ( '.'? ( '<<' | '>>' | '>>>' ) )

_power_operator ::=
	 ( '.'? ( '^' | '↑' | '↓' | '⇵' | '⟰' | '⟱' | '⤈' | '⤉' | '⤊' | '⤋' | '⤒' | '⤓' | '⥉' | '⥌' | '⥍' | '⥏' | '⥑' | '⥔' | '⥕' | '⥘' | '⥙' | '⥜' | '⥝' | '⥠' | '⥡' | '⥣' | '⥥' | '⥮' | '⥯' | '￪' | '￬' ) )

_tilde_operator ::=
	 ( '.'? ( '~' ) )

_type_order_operator ::=
	 ( '.'? ( '<:' | '>:' ) )

_unary_operator ::=
	 ( '.'? ( '!' | '¬' | '√' | '∛' | '∜' ) )

_unary_plus_operator ::=
	 ( '.'? ( '+' | '-' | '±' | '∓' ) )

_syntactic_operator ::=
	 ( '$' | '.' | '...' | '->' | '?' )

_terminator ::=
	 '\n' 
	| ';'+

line_comment ::=
	 ( '#' '.'* )

