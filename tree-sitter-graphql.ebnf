//
// From tree-sitter-graphql/src/grammar.json
//
//
// EBNF to generate railroad diagram at 
//      (IPV6) https://www.bottlecaps.de/rr/ui
//      (IPV4) https://rr.red-dove.com/ui
//

source_file ::=
	 Document

comma ::=
	 ','

Document ::=
	 Definition+

Definition ::=
	 ExecutableDefinition
	| TypeSystemDefinition
	| TypeSystemExtension

ExecutableDefinition ::=
	 OperationDefinition
	| FragmentDefinition

OperationDefinition ::=
	 SelectionSet
	| OperationType Name? VariableDefinitions? Directives? SelectionSet

OperationType ::=
	 'query'
	| 'mutation'
	| 'subscription'

SelectionSet ::=
	 '{' Selection+ '}'

Selection ::=
	 Field
	| FragmentSpread
	| InlineFragment

Field ::=
	 Alias? Name Arguments? Directives? SelectionSet?

Alias ::=
	 Name ':'

Arguments ::=
	 '(' Argument+ ')'

Argument ::=
	 Name ':' Value

FragmentSpread ::=
	 '...' FragmentName Directives?

InlineFragment ::=
	 '...' TypeCondition? Directives? SelectionSet

FragmentDefinition ::=
	 'fragment' FragmentName TypeCondition Directives? SelectionSet

FragmentName ::=
	 Name

TypeCondition ::=
	 'on' NamedType

Value ::=
	 Variable
	| IntValue
	| FloatValue
	| StringValue
	| BooleanValue
	| NullValue
	| EnumValue
	| ListValue
	| ObjectValue

BooleanValue ::=
	 'false'
	| 'true'

NullValue ::=
	 'null'

EnumValue ::=
	 Name

ListValue ::=
	 '[' Value* ']'

ObjectValue ::=
	 '{' ObjectField* '}'

ObjectField ::=
	 Name ':' Value

IntValue ::=
	 '-'?('0'|[1-9][0-9]*)

FloatValue ::=
	 ( '-'?('0'|[1-9][0-9]*) ( '.'[0-9]+ | ('e'|'E')('\'+|'-')?[0-9]+ | '.'[0-9]+ ('e'|'E')('\'+|'-')?[0-9]+ ) )

StringValue ::=
	 '"""' ([^"]|'#x0A'|'""'?[^"])* '"""'
	| '"'  [^"\#x0A]* '"' 

VariableDefinitions ::=
	 '(' VariableDefinition+ ')'

VariableDefinition ::=
	 Variable ':' Type DefaultValue?

Variable ::=
	 '$' Name

DefaultValue ::=
	 '=' Value

Type ::=
	 NamedType
	| ListType
	| NonNullType

NamedType ::=
	 Name

ListType ::=
	 '[' Type ']'

NonNullType ::=
	 ( NamedType | ListType ) '!'

Directives ::=
	 Directive+

Directive ::=
	 '@' Name Arguments?

TypeSystemDefinition ::=
	 SchemaDefinition
	| TypeDefinition
	| DirectiveDefinition

TypeSystemExtension ::=
	 SchemaExtension
	| TypeExtension

SchemaDefinition ::=
	 'schema' Directives? '{' OperationTypeDefinition+ '}'

SchemaExtension ::=
	 'extend' 'schema' Directives? '{' OperationTypeDefinition+ '}' | 'extend' 'schema' Directives

TypeExtension ::=
	 ScalarTypeExtension
	| ObjectTypeExtension
	| InterfaceTypeExtension
	| UnionTypeExtension
	| EnumTypeExtension
	| InputObjectTypeExtension

ScalarTypeExtension ::=
	 'extend' 'scalar' Name Directives

ObjectTypeExtension ::=
	 'extend' 'type' Name ImplementsInterfaces? Directives? FieldsDefinition | 'extend' 'type' Name ImplementsInterfaces? Directives | 'extend' 'type' Name ImplementsInterfaces

InterfaceTypeExtension ::=
	 'extend' 'interface' Name Directives? FieldsDefinition | 'extend' 'interface' Name Directives

UnionTypeExtension ::=
	 'extend' 'union' Name Directives? UnionMemberTypes
	| 'extend' 'union' Name Directives

EnumTypeExtension ::=
	 'extend' 'enum' Name Directives? EnumValuesDefinition | 'extend' 'enum' Name Directives

InputObjectTypeExtension ::=
	 'extend' 'input' Name Directives? InputFieldsDefinition | 'extend' 'input' Name Directives

OperationTypeDefinition ::=
	 OperationType ':' NamedType

Description ::=
	 StringValue

TypeDefinition ::=
	 ScalarTypeDefinition
	| ObjectTypeDefinition
	| InterfaceTypeDefinition
	| UnionTypeDefinition
	| EnumTypeDefinition
	| InputObjectTypeDefinition

ScalarTypeDefinition ::=
	 Description? 'scalar' Name Directives?

ObjectTypeDefinition ::=
	 Description? 'type' Name ImplementsInterfaces? Directives? FieldsDefinition?

ImplementsInterfaces ::=
	 'implements' '&'? NamedType ( '&' NamedType )*

FieldsDefinition ::=
	 '{' FieldDefinition+ '}'

FieldDefinition ::=
	 Description? Name ArgumentsDefinition? ':' Type Directive?

ArgumentsDefinition ::=
	 '(' InputValueDefinition+ ')'

InputValueDefinition ::=
	 Description? Name ':' Type DefaultValue? Directives?

InterfaceTypeDefinition ::=
	 Description? 'interface' Name Directives? FieldsDefinition?

UnionTypeDefinition ::=
	 Description? 'union' Name Directives? UnionMemberTypes?

UnionMemberTypes ::=
	 '=' '|'? NamedType ( '|' NamedType )*

EnumTypeDefinition ::=
	 Description? 'enum' Name Directives? EnumValuesDefinition?

EnumValuesDefinition ::=
	 '{' EnumValueDefinition+ '}'

EnumValueDefinition ::=
	 Description? EnumValue Directives?

InputObjectTypeDefinition ::=
	 Description? 'input' Name Directives? InputFieldsDefinition?

InputFieldsDefinition ::=
	 '{' InputValueDefinition+ '}'

DirectiveDefinition ::=
	 Description? 'directive' '@' Name ArgumentsDefinition? 'on' DirectiveLocations

DirectiveLocations ::=
	 '|'? DirectiveLocation ( '|' DirectiveLocation )*

DirectiveLocation ::=
	 ExecutableDirectiveLocation
	| TypeSystemDirectiveLocation

ExecutableDirectiveLocation ::=
	 'QUERY'
	| 'MUTATION'
	| 'SUBSCRIPTION'
	| 'FIELD'
	| 'FRAGMENT_DEFINITION'
	| 'FRAGMENT_SPREAD'
	| 'INLINE_FRAGMENT'
	| 'VARIABLE_DEFINITION'

TypeSystemDirectiveLocation ::=
	 'SCHEMA'
	| 'SCALAR'
	| 'OBJECT'
	| 'FIELD_DEFINITION'
	| 'ARGUMENT_DEFINITION'
	| 'INTERFACE'
	| 'UNION'
	| 'ENUM'
	| 'ENUM_VALUE'
	| 'INPUT_OBJECT'
	| 'INPUT_FIELD_DEFINITION'

comment ::=
	 ( '# ' '.'* )

Name ::=
	 [_A-Za-z][_0-9A-Za-z]*

