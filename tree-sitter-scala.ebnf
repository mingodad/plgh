//
// From tree-sitter-scala/src/grammar.json
//
//
// EBNF to generate railroad diagram at 
//      (IPV6) https://www.bottlecaps.de/rr/ui
//      (IPV4) https://rr.red-dove.com/ui
//

compilation_unit ::=
	 _shebang? ( _top_level_definition ( _semicolon _top_level_definition )* _semicolon? )?

_top_level_definition ::=
	 package_clause
	| package_object
	| _definition
	| _end_marker
	| expression

_definition ::=
	 given_definition
	| extension_definition
	| class_definition
	| import_declaration
	| export_declaration
	| object_definition
	| enum_definition
	| trait_definition
	| val_definition
	| val_declaration
	| var_definition
	| var_declaration
	| type_definition
	| function_definition
	| function_declaration

enum_definition ::=
	 annotation* 'enum' _class_constructor extends_clause? derives_clause? enum_body

_enum_block ::=
	 ( enum_case_definitions | expression | _definition ) ( _semicolon ( enum_case_definitions | expression | _definition ) )* _semicolon?

enum_body ::=
	 ':' _indent _enum_block _outdent
	| '{' _enum_block? '}'

enum_case_definitions ::=
	 annotation* 'case' ( simple_enum_case ( ',' simple_enum_case )* | full_enum_case )

simple_enum_case ::=
	 _identifier extends_clause?

full_enum_case ::=
	 _identifier _full_enum_def

_full_enum_def ::=
	 type_parameters? class_parameters+ extends_clause?

package_clause ::=
	 'package' package_identifier template_body?

package_identifier ::=
	 _identifier ( '.' _identifier )*

package_object ::=
	 'package' 'object' _object_definition

import_declaration ::=
	 'import' _namespace_expression ( ',' _namespace_expression )*

export_declaration ::=
	 'export' _namespace_expression ( ',' _namespace_expression )*

_namespace_expression ::=
	 ( _identifier ( '.' _identifier )* ) ( '.' ( namespace_wildcard | namespace_selectors | as_renamed_identifier ) )?

namespace_wildcard ::=
	 '*' | '_' | 'given'

_namespace_given_by_type ::=
	 'given' _type

namespace_selectors ::=
	 '{' ( _namespace_given_by_type | namespace_wildcard | _identifier | arrow_renamed_identifier | as_renamed_identifier ) ( ',' ( _namespace_given_by_type | namespace_wildcard | _identifier | arrow_renamed_identifier | as_renamed_identifier ) )* ','? '}'

_import_selectors ::=
	 namespace_selectors

arrow_renamed_identifier ::=
	 _identifier '=>' ( _identifier | wildcard )

as_renamed_identifier ::=
	 _identifier 'as' ( _identifier | wildcard )

object_definition ::=
	 annotation* modifiers? 'case'? 'object' _object_definition

_object_definition ::=
	 _identifier extends_clause? derives_clause? _definition_body?

class_definition ::=
	 annotation* modifiers? 'case'? 'class' _class_definition

_class_definition ::=
	 _class_constructor extends_clause? derives_clause? _definition_body?

_definition_body ::=
	 _automatic_semicolon? template_body

_class_constructor ::=
	 _identifier type_parameters? annotation? access_modifier? ( _automatic_semicolon? class_parameters )*

trait_definition ::=
	 annotation* modifiers? 'trait' _class_definition

type_parameters ::=
	 '[' _variant_type_parameter ( ',' _variant_type_parameter )* ','? ']'

_variant_type_parameter ::=
	 annotation* ( covariant_type_parameter | contravariant_type_parameter | _type_parameter | type_lambda )

covariant_type_parameter ::=
	 '+' _type_parameter

contravariant_type_parameter ::=
	 '-' _type_parameter

_type_parameter ::=
	 ( wildcard | _identifier ) type_parameters? lower_bound? upper_bound? view_bound*? context_bound*?

upper_bound ::=
	 '<:' _type

lower_bound ::=
	 '>:' _type

view_bound ::=
	 '<%' _type

context_bound ::=
	 ':' _type

template_body ::=
	 _indented_template_body
	| _braced_template_body

_indented_template_body ::=
	 ':' _indent self_type? _block _outdent

_braced_template_body ::=
	 '{' ( _braced_template_body1 | _braced_template_body2 )? '}'

_braced_template_body1 ::=
	 self_type? _block

_braced_template_body2 ::=
	 ( _indent self_type? | self_type? _indent ) _block? _outdent

with_template_body ::=
	 _indent self_type? _block _outdent

_extension_template_body ::=
	 _indent _block _outdent
	| '{' _block? '}'

_end_marker ::=
	 'end' ( 'if' | 'while' | 'for' | 'match' | 'try' | 'new' | 'this' | 'given' | 'extension' | 'val' | _identifier )

self_type ::=
	 _identifier _self_type_ascription? '=>'

_self_type_ascription ::=
	 ':' _type

annotation ::=
	 '@' _simple_type arguments*

val_definition ::=
	 _start_val ( _pattern | identifiers ) ( ':' _type )? '=' _indentable_expression

val_declaration ::=
	 _start_val _identifier ( ',' _identifier )* ':' _type

_start_val ::=
	 annotation* modifiers? 'val'

var_declaration ::=
	 _start_var _identifier ( ',' _identifier )* ':' _type

var_definition ::=
	 _start_var ( _pattern | identifiers ) ( ':' _type )? '=' _indentable_expression

_start_var ::=
	 annotation* modifiers? 'var'

type_definition ::=
	 annotation* modifiers? opaque_modifier? 'type' _type_constructor ( '=' _type )?

_type_constructor ::=
	 _type_identifier type_parameters? lower_bound? upper_bound?

function_definition ::=
	 _function_declaration ( '=' _indentable_expression | block )

function_declaration ::=
	 _function_declaration

_function_declaration ::=
	 annotation* modifiers? 'def' _function_constructor ( ':' _type )?

_function_constructor ::=
	 _identifier type_parameters? ( _automatic_semicolon? parameters )* _automatic_semicolon?

opaque_modifier ::=
	 'opaque'

extension_definition ::=
	 'extension' type_parameters? parameters* ( _extension_template_body | function_definition | function_declaration )

given_definition ::=
	 annotation* modifiers? 'given' _given_constructor? ( _structural_instance | _annotated_type ( '=' _indentable_expression )? )

_given_constructor ::=
	 _identifier? type_parameters? ( _automatic_semicolon? parameters )* _automatic_semicolon? ':'

_structural_instance ::=
	 _constructor_application 'with' with_template_body

_constructor_application ::=
	 _annotated_type | compound_type | _structural_type | _simple_type arguments | _annotated_type arguments | compound_type arguments

_constructor_applications ::=
	 _constructor_application ( ',' _constructor_application )* | _constructor_application ( 'with' _constructor_application )*

modifiers ::=
	 'abstract' | 'final' | 'sealed' | 'implicit' | 'lazy' | 'override' | access_modifier | inline_modifier | infix_modifier | open_modifier | transparent_modifier+

access_modifier ::=
	 ( 'private' | 'protected' ) access_qualifier?

access_qualifier ::=
	 '[' _identifier ']'

inline_modifier ::=
	 'inline'

infix_modifier ::=
	 'infix'

open_modifier ::=
	 'open'

transparent_modifier ::=
	 'transparent'

extends_clause ::=
	 'extends' _constructor_applications arguments?

derives_clause ::=
	 'derives' ( _type_identifier | stable_type_identifier ) ( ',' ( _type_identifier | stable_type_identifier ) )*

class_parameters ::=
	 _automatic_semicolon? '(' ( 'implicit' | 'using' )? ( class_parameter ( ',' class_parameter )* ','? )? ')'

parameters ::=
	 '(' 'implicit'? ( parameter ( ',' parameter )* ','? )? ')'
	| _using_parameters_clause

_using_parameters_clause ::=
	 '(' 'using' ( parameter ( ',' parameter )* ','? | _param_type ( ',' _param_type )* ','? ) ')'

class_parameter ::=
	 annotation* modifiers? ( 'val' | 'var' )? _identifier ( ':' _param_type )? ( '=' expression )?

parameter ::=
	 annotation* inline_modifier? _identifier ':' _param_type ( '=' expression )?

_block ::=
	 ( expression | _definition | _end_marker | ';' ) ( _semicolon ( expression | _definition | _end_marker | ';' ) )* _semicolon?

_indentable_expression ::=
	 indented_block | indented_cases | expression

block ::=
	 '{' _block? '}'

indented_block ::=
	 _indent _block _outdent _end_marker?

indented_cases ::=
	 _indent case_clause+ _outdent

_indented_type_cases ::=
	 _indent type_case_clause+ _outdent

_type ::=
	 function_type
	| compound_type
	| infix_type
	| match_type
	| _annotated_type
	| literal_type
	| _structural_type
	| type_lambda

_annotated_type ::=
	 annotated_type | _simple_type

annotated_type ::=
	 _simple_type annotation+

_simple_type ::=
	 generic_type
	| projected_type
	| tuple_type
	| singleton_type
	| stable_type_identifier
	| _type_identifier
	| wildcard

compound_type ::=
	 _annotated_type ( 'with' _annotated_type )+
	| _annotated_type _refinement
	| _annotated_type ( 'with' _annotated_type )+ _refinement

_structural_type ::=
	 template_body

_refinement ::=
	 template_body

_infix_type_choice ::=
	 compound_type | infix_type | _annotated_type

infix_type ::=
	 _infix_type_choice _identifier _infix_type_choice

tuple_type ::=
	 '(' _type ( ',' _type )* ','? ')'

singleton_type ::=
	 ( _identifier | stable_identifier ) '.' 'type'

stable_type_identifier ::=
	 ( _identifier | stable_identifier ) '.' _type_identifier

stable_identifier ::=
	 ( _identifier | stable_identifier ) '.' _identifier

generic_type ::=
	 _simple_type type_arguments

projected_type ::=
	 _simple_type '#' _type_identifier

match_type ::=
	 _infix_type_choice 'match' _indented_type_cases

type_case_clause ::=
	 'case' _infix_type_choice _arrow_then_type

function_type ::=
	 parameter_types _arrow_then_type

_arrow_then_type ::=
	 ( '=>' | '?=>' ) _type

parameter_types ::=
	 _annotated_type | '(' ( _param_type ( ',' _param_type )* ','? )? ')' | compound_type | infix_type

_param_type ::=
	 _type
	| lazy_parameter_type
	| repeated_parameter_type

lazy_parameter_type ::=
	 '=>' _type

repeated_parameter_type ::=
	 _type '*'

_type_identifier ::=
	 _identifier

type_lambda ::=
	 '[' _type_parameter ( ',' _type_parameter )* ','? ']' '=>>' _type

_pattern ::=
	 _identifier
	| stable_identifier
	| interpolated_string_expression
	| capture_pattern
	| tuple_pattern
	| case_class_pattern
	| infix_pattern
	| alternative_pattern
	| typed_pattern
	| given_pattern
	| quote_expression
	| literal
	| wildcard
	| repeat_pattern

case_class_pattern ::=
	 ( _type_identifier | stable_type_identifier ) '(' ( _pattern ( ',' _pattern )* ','? )? ')'

infix_pattern ::=
	 _pattern _identifier _pattern

capture_pattern ::=
	 ( _identifier | wildcard ) '@' _pattern

repeat_pattern ::=
	 _pattern '*'

typed_pattern ::=
	 _pattern ':' _type

given_pattern ::=
	 'given' _type

alternative_pattern ::=
	 _pattern '|' _pattern

tuple_pattern ::=
	 '(' _pattern ( ',' _pattern )* ')'

expression ::=
	 if_expression
	| match_expression
	| try_expression
	| assignment_expression
	| lambda_expression
	| postfix_expression
	| ascription_expression
	| infix_expression
	| prefix_expression
	| return_expression
	| throw_expression
	| while_expression
	| do_while_expression
	| for_expression
	| macro_body
	| _simple_expression

_simple_expression ::=
	 identifier
	| operator_identifier
	| literal
	| interpolated_string_expression
	| unit
	| tuple_expression
	| wildcard
	| block
	| splice_expression
	| case_block
	| quote_expression
	| instance_expression
	| parenthesized_expression
	| field_expression
	| generic_function
	| call_expression

lambda_expression ::=
	 ( bindings | 'implicit'? _identifier | wildcard ) ( '=>' | '?=>' ) _indentable_expression

if_expression ::=
	 inline_modifier? 'if' _if_condition _indentable_expression ( ';'? 'else' _indentable_expression )?

_if_condition ::=
	 parenthesized_expression | _indentable_expression 'then'

match_expression ::=
	 inline_modifier? expression 'match' ( case_block | indented_cases )

try_expression ::=
	 'try' _indentable_expression catch_clause? finally_clause?

catch_clause ::=
	 'catch' ( _indentable_expression | _expr_case_clause )

_expr_case_clause ::=
	 'case' _case_pattern expression

finally_clause ::=
	 'finally' _indentable_expression

binding ::=
	 ( _identifier | wildcard ) ( ':' _param_type )?

bindings ::=
	 '(' ( binding ( ',' binding )* ','? )? ')'

case_block ::=
	 '{' '}'
	| '{' case_clause+ '}'

case_clause ::=
	 'case' _case_pattern _block?

_case_pattern ::=
	 _pattern guard? '=>'

guard ::=
	 'if' _postfix_expression_choice

assignment_expression ::=
	 ( prefix_expression | _simple_expression ) '=' expression

generic_function ::=
	 expression type_arguments

call_expression ::=
	 _simple_expression ( arguments | case_block | block )
	| _postfix_expression_choice ':' colon_argument

colon_argument ::=
	 ( ( bindings | _identifier | wildcard ) '=>' )? ( indented_block | indented_cases )

field_expression ::=
	 _simple_expression '.' _identifier

instance_expression ::=
	 'new' _constructor_application template_body
	| 'new' template_body
	| 'new' _constructor_application

ascription_expression ::=
	 _postfix_expression_choice ':' ( _param_type | annotation )

infix_expression ::=
	 ( infix_expression | prefix_expression | _simple_expression ) _identifier ( prefix_expression | _simple_expression | ':' colon_argument )

postfix_expression ::=
	 ( infix_expression | prefix_expression | _simple_expression ) _identifier

_postfix_expression_choice ::=
	 postfix_expression | infix_expression | prefix_expression | _simple_expression

macro_body ::=
	 'macro' ( infix_expression | prefix_expression | _simple_expression )

prefix_expression ::=
	 ( '+' | '-' | '!' | '~' ) _simple_expression

tuple_expression ::=
	 '(' expression ( ',' expression )+ ','? ')'

parenthesized_expression ::=
	 '(' expression ')'

type_arguments ::=
	 '[' _type ( ',' _type )* ','? ']'

arguments ::=
	 '(' ( _exprs_in_parens | 'using' _exprs_in_parens ) ')'

_exprs_in_parens ::=
	 expression ( ',' expression )* ','?

splice_expression ::=
	 '$' ( '{' _block '}' | '[' _type ']' | identifier )

quote_expression ::=
	 "'"  ( '{' _block '}' | '[' _type ']' | identifier )

symbol_literal ::=
	 '__no_longer_used_symbol_literal_'

identifier ::=
	 _alpha_identifier | _backquoted_id | _soft_identifier

_soft_identifier ::=
	 'infix' | 'inline' | 'opaque' | 'open' | 'transparent' | 'end'

_alpha_identifier ::=
	 [\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F\$][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\$\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9\$_\p{Ll}]*('_'[#x2D-!#x23%&*+\/\:<=>?@\u005e\u007c~\p{Sm}\p{So}]+)?

_interpolation_identifier ::=
	 [\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F][\p{Lu}\p{Lt}\p{Nl}\p{Lo}\p{Lm}\p{Ll}_\u00AA\u00BB\u02B0-\u02B8\u02C0-\u02C1\u02E0-\u02E4\u037A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\uA69C-\uA69D\uA770\uA7F8-\uA7F9\uAB5C-\uAB5F0-9_\p{Ll}]*

_backquoted_id ::=
	 '`'[^#x0A`]+'`'

_identifier ::=
	 identifier
	| operator_identifier

identifiers ::=
	 identifier ',' identifier ( ',' identifier )*

wildcard ::=
	 '_'

operator_identifier ::=
	 ( [#x2D-!#x23%&*+\/\:<=>?@\u005e\u007c~\p{Sm}\p{So}] | [#x2D-!#x23%&*+\:<=>?@\u005e\u007c~\p{Sm}\p{So}] [#x2D-!#x23%&*+\/\:<=>?@\u005e\u007c~\p{Sm}\p{So}]+ | [#x2D-!#x23%&*+\/\:<=>?@\u005e\u007c~\p{Sm}\p{So}] [#x2D-!#x23%&+\:<=>?@\u005e\u007c~\p{Sm}\p{So}] [#x2D-!#x23%&*+\/\:<=>?@\u005e\u007c~\p{Sm}\p{So}]* )

_non_null_literal ::=
	 integer_literal
	| floating_point_literal
	| boolean_literal
	| character_literal
	| string

literal_type ::=
	 _non_null_literal

literal ::=
	 _non_null_literal
	| null_literal

integer_literal ::=
	 ( [-]? ( [0-9]('_'?[0-9])* | '0'[xX][0-9a-fA-F]('_'?[0-9a-fA-F])* ) [lL]? )

floating_point_literal ::=
	 ( [-]? ( [0-9]+'.'[0-9]+ [eE][+-]?[0-9]+? [dfDF]? | '.'[0-9]+ [eE][+-]?[0-9]+? [dfDF]? | [0-9]+ [eE][+-]?[0-9]+ [dfDF]? | [0-9]+ [eE][+-]?[0-9]+? [dfDF] ) )

boolean_literal ::=
	 'true'
	| 'false'

character_literal ::=
	 ( "'"  ( '\\'  ( [^xu] | 'u'[0-9a-fA-F]'{4}' | 'u{'[0-9a-fA-F]+'}' | 'x'[0-9a-fA-F]'{2}' ) | [^\'#x0A] )? "'"  )

interpolated_string_expression ::=
	 identifier interpolated_string

_interpolated_string_start ::=
	 '"' 

_interpolated_multiline_string_start ::=
	 '"""'

_dollar_escape ::=
	 '$' ( '$' | '"'  )

_aliased_interpolation_identifier ::=
	 _interpolation_identifier

interpolation ::=
	 '$' ( _aliased_interpolation_identifier | block )

interpolated_string ::=
	 _interpolated_string_start ( _interpolated_string_middle ( _dollar_escape | interpolation ) )* _interpolated_string_end
	| _interpolated_multiline_string_start ( _interpolated_multiline_string_middle ( _dollar_escape | interpolation ) )* _interpolated_multiline_string_end

string ::=
	 _simple_string
	| _simple_multiline_string

_semicolon ::=
	 ';'
	| _automatic_semicolon

null_literal ::=
	 'null'

unit ::=
	 '(' ')'

return_expression ::=
	 'return' expression?

throw_expression ::=
	 'throw' expression

while_expression ::=
	 'while' parenthesized_expression expression | 'while' ( _indentable_expression 'do' ) _indentable_expression

do_while_expression ::=
	 'do' expression 'while' parenthesized_expression

for_expression ::=
	 'for' ( '(' enumerators ')' | '{' enumerators '}' ) ( expression | 'yield' _indentable_expression )
	| 'for' enumerators ( 'do' _indentable_expression | 'yield' _indentable_expression )

enumerators ::=
	 enumerator ( _semicolon enumerator )* _automatic_semicolon?
	| _indent enumerator ( _semicolon enumerator )* _automatic_semicolon? _outdent

enumerator ::=
	 'case'? _pattern ( '<-' | '=' ) expression guard?
	| guard+

_shebang ::=
	 ( '#!' '.'* )

comment ::=
	 '//' ( using_directive | _comment_text )

_comment_text ::=
	 '.'*

using_directive ::=
	 '>' 'using' using_directive_key using_directive_value

using_directive_key ::=
	 [^ #x09#x0A#x0B#x0C#x0D]+

using_directive_value ::=
	 '.'*

block_comment ::=
	 '/*' ( '.' | '//' )* '*/'

